@page "/Account"


@rendermode InteractiveServer

@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using WebApp.Dto
@using WebApp.Models
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal

<PageTitle>Account</PageTitle>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark shadow-sm px-3">
    <div class="container-fluid">
        <!-- Logo -->
        <a class="navbar-brand text-white d-flex align-items-center fw-bold" href="#">
            <img src="images/security.png" style="width: 40px; height: auto;" alt="Security">
            <span class="ms-2">Bertly</span>
        </a>


        <!-- Ikony -->
        <div class="d-flex align-items-center ms-3">
            <button class="btn btn-outline-light btn-sm rounded-circle me-3 icon-btn"><i class="bi bi-bell"></i></button>
            <button class="btn btn-outline-light btn-sm rounded-circle me-3 icon-btn"><i class="bi bi-person"></i></button>
            <button class="btn btn-outline-light btn-sm rounded-circle me-3 icon-btn"><i class="bi bi-question-circle"></i></button>
            <button class="btn btn-outline-light btn-sm rounded-circle icon-btn"><i class="bi bi-gear"></i></button>
        </div>
    </div>
</nav>



<div class="container-fluid d-flex p-0 h-100 min-vh-100">
    <nav class="d-flex flex-column bg-dark border-end shadow-sm sidebar ">
    <!-- Logo a název -->
        <div class="navbar-brand text-white text-center py-3 border-bottom">
            Management
        </div>

        <ul class="navbar-nav flex-column">
            <li class="nav-item">
                <a class="nav-link d-flex align-items-center text-white" href="/HomeManager">
                    <i class="bi bi-speedometer2 me-2"></i> Dashboard
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link d-flex align-items-center text-white" href="/PasswordsPage">
                    <i class="bi bi-lock me-2"></i> Passwords
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link d-flex align-items-center text-white" href="/SecurityTips">
                    <i class="bi bi-book me-2"></i> Security Tips
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link d-flex align-items-center text-white" href="/Validator">
                    <i class="bi bi-patch-check me-2"></i> Validator
                </a>
            </li>

            <!-- Oddělení Settings -->
            <div class="sidebar-divider"></div>
            <p class="text-white ps-3 fw-bold text-white">Settings</p>

            <li class="nav-item">
                <a class="nav-link d-flex align-items-center" href="/Account">
                    <i class="bi bi-person-circle me-2 text-white"></i> Account
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link d-flex align-items-center" href="/Support">
                    <i class="bi bi-chat-right me-2 text-white"></i> Support
                </a>
            </li>
            <li class="nav-item mt-auto">
                <a class="nav-link logout-link d-flex align-items-center" href="/logout">
                    <i class="bi bi-box-arrow-left me-2"></i> Log Out
                </a>
            </li>
        </ul>
    </nav>

    <main class="w-100">
        <div class="d-flex flex-column align-items-center p-4 bg-dark text-white min-vh-100">
            <div class="container-fluid text-dark bg-light p-4 rounded w-100" style="flex-grow: 1;">
                <div class="row mb-3" style="height: 25%;">
                    <div class="col-md-4">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center fw-bold">Personal
                                Informations
                <div>
                     <button type="button" class="btn p-0" @onclick="EditPersonalInfo"><i class="bi bi-gear"></i></button>
                </div>
                </div>
                <div class="card-body d-flex flex-column gap-3">
                
                <EditForm Model="@user" OnValidSubmit="EditUserInfo">
                    <div class="d-flex align-items-center mb-3 mt-3">
                        <label for="username" class="form-label me-3" style="width: 150px;">Full Name:</label>
                        <InputText id="username" class="form-control flex-grow-1" @bind-Value="user.Username" disabled=@(!WantToEdit) />
                    </div>
                    
                    <div class="d-flex align-items-center mb-3">
                        <label for="email" class="form-label me-3" style="width: 150px;">Email address:</label>
                        <InputText id="email" type="email" class="form-control flex-grow-1" @bind-Value="user.Email" disabled="@(!WantToEdit)" />
                    </div>

                   <div class="d-flex align-items-center mb-3">
                        <label for="password" class="form-label me-3" style="width: 150px;">Password:</label>
                        <div class="input-group flex-grow-1">
                            <InputText id="password" 
                                    type="@(IsPasswordVisible(user.Id) ? "text" : "password")" 
                                    class="form-control" 
                                    @bind-Value="user.Password" 
                                    disabled="@(!WantToEdit)" />
                            <span class="input-group-text" style="cursor: pointer;" @onclick="() => TogglePasswordVisibility(user.Id)">
                                <i class="bi @(IsPasswordVisible(user.Id) ? "bi-eye-slash" : "bi-eye")"></i>
                            </span>
                        </div>
                    </div>


                    <div class="d-flex align-items-center mb-3">
                        <label for="address" class="form-label me-3" style="width: 150px;">Address:</label>
                        <InputText id="address" class="form-control flex-grow-1" @bind-Value="user.Address" disabled="@(!WantToEdit)" />
                    </div>

                    <div class="d-flex align-items-center mb-3">
                        <label for="dob" class="form-label me-3" style="width: 150px;">Date of Birth:</label>
                        <InputDate id="dob" class="form-control flex-grow-1" @bind-Value="user.DateOfBirth" disabled="@(!WantToEdit)" min= />
                    </div>
                </EditForm>


                <hr>

                <div class="d-flex align-items-center mb-3">
                    <label for="customerId" class="form-label me-3" style="width: 150px;">Customer Id:</label>
                    <input type="text" id="customerId" value="@user.CustomerId" class="form-control flex-grow-1" disabled />
                </div>

                <div class="d-flex align-items-center mb-3">
                    <label for="accountId" class="form-label me-3" style="width: 150px;">Account Id:</label>
                    <input type="text" id="accountId" value="@user.AccountId" class="form-control flex-grow-1" disabled />
                </div>

                <div class="d-flex align-items-center mb-3">
                    <label for="developerMode" class="form-label me-3" style="width: 150px;">Developer Mode:</label>
                    <InputSelect id="category" @bind-Value="userPassword.Category" class="form-select">
                                <option disabled >Select a Mode</option>
                                <option value="Enabled">Enabled</option>
                                <option value="Disabled" selected>Disabled</option>
                    </InputSelect>
                </div>
                <div class="d-flex justify-content-center">
                    <button type="submit" class="btn btn-primary w-25" @onclick="EditUserInfo">Save</button>
                    
                </div>
            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Change Password</div>
                            <div class="card-body d-flex flex-column justify-content-start">
                                <EditForm Model="@userPassword" OnValidSubmit="ChangePassword"
                                    FormName="ChangePassword">
                                    <div class="mb-3">
                                        <label for="oldPassword" class="form-label">Old Password</label>
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="bi bi-lock"></i>
                                            </span>
                                            <InputText type="password" id="oldPassword" class="form-control"
                                                @bind-Value="oldPassword" placeholder="Old Password" />
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label for="newPassword" class="form-label">New Password</label>
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="bi bi-lock"></i>
                                            </span>
                                            <InputText type="password" id="newPassword" class="form-control"
                                                @bind-Value="newPassword" placeholder="New Password" />
                                        </div>
                                    </div>
                                    <div class="d-flex justify-content-center">
                                        <button type="submit" class="btn btn-primary w-25">Change Password</button>
                                    </div>
                                    <em class="d-flex align-items-center justify-content-center mt-4 italic-text">We track how old your password is old
                                        and we will send you a notification to change the password if it is too old.
                                    </em>
                                </EditForm>
                                <div class="mt-5 text-center">
                                    <h6>Need Help?</h6>
                                    <p class="mt-4">If you encounter any issues while changing your password, please contact our 
                                        <a href="#" class="text-decoration-none">support team</a> for assistance.</p>
                                </div>
                               
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Two-Factor Authentication (2FA)</div>
                            <div class="card-body d-flex flex-column justify-content-start">
                            <div class="text-center mb-4">
                                <h6 class="fs-4">Status</h6>
                                <div class="d-flex flex-column align-items-center">
                                    
                                    @if(user.TwoFactorEnabled == true)
                                    {
                                        <i class="bi bi-check-circle text-success fs-4 mb-2"></i>
                                        <p id="2fa-status" class="mb-0 text-success">Enabled</p>
                                        <p class="text-muted mt-2">Your account is protected by Two-Factor Authentication (2FA). This additional security 
                                        layer helps keep your account safe from unauthorized access!</p>
                                    }
                                    else
                                    {
                                        <i class="bi bi-x-circle text-danger fs-4 mb-2"></i>
                                        <p id="2fa-status" class="mb-0 text-danger">Disabled</p>
                                        <p class="text-muted mt-2">Your account is not protected by Two-Factor Authentication (2FA). We highly
                                            recommend you to enable it.
                                        </p>

                                    }
                                    
                                </div>
                            </div>
                            <div class=" mb-4 text-center">
                                <h6><i class="bi bi-key me-2"></i>Set Up 2FA</h6>
                                <p>To enhance your account security, set up Two-Factor Authentication (2FA).</p>
                                <a class="btn btn-primary w-50" href="/2FA" role="button">Turn On</a>
                            </div>


                            <div class="mb-4 text-center">
                                <h6><i class="bi bi-gear me-2"></i>Manage 2FA</h6>
                                <button class="btn btn-secondary w-50 " data-bs-toggle="modal" data-bs-target="#manage2FA">Manage Settings</button>
                            </div>


                            <div class="mb-4 text-center">
                                <h6><i class="bi bi-x-circle me-2"></i>Disable 2FA</h6>
                                <p>If you want to disable Two-Factor Authentication, click the button below. This action will reduce the security of your account.</p>
                                <button class="btn btn-danger w-50" data-bs-toggle="modal" data-bs-target="#disable2FA">Disable 2FA</button>

                            </div>

                            <div class="modal fade" id="manage2FA" tabindex="-1" aria-labelledby="manage2FA" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="manage2FA">Manage Two-Factor Authentication</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Dismiss</button>
                                    <button type="button" class="btn btn-primary">Save changes</button>
                                </div>
                                </div>
                            </div>
                            </div>

                            <div class="modal fade" id="disable2FA" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="disable2FA" aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="disable2FA">Disable Two-Factor Authentication</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    
                                    <p><strong>Disabling 2FA</strong> could leave your account vulnerable to attacks, especially if your password is compromised. 
                                    With rising security threats and data breaches, we strongly recommend keeping 2FA turned on to safeguard your sensitive data.</p>
                                    
                                    <h4>Here is why 2FA matters:</h4>
                                    <ul class="mt-3">
                                        <li><strong>Enhanced Protection</strong>: Even if someone steals your password, they wont be able to log in without access to your 2FA device.</li>
                                        <li><strong>Prevent Unauthorized Access</strong>: 2FA drastically reduces the chances of hackers breaking into your account.</li>
                                        <li><strong>Peace of Mind</strong>: Know that your account is protected, even in case of password theft.</li>
                                    </ul>
                                    <p>We understand that 2FA might add an extra step when logging in, but the security benefits far outweigh the slight inconvenience. 
                                        Please consider keeping 2FA enabled to ensure your account stays secure.</p>
                                    <p><strong>Stay safe, stay protected!</strong></p>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary"  data-bs-dismiss="modal">Close</button>
                                    <button type="button" class="btn btn-danger" @onclick="Disable2FA" data-bs-dismiss="modal">Disable</button>
                                </div>
                                </div>
                            </div>
                            </div>
                            <div class="alert alert-warning mt-4" role="alert">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>Important:</strong> Disabling 2FA reduces the security of your account. Consider keeping it enabled to protect your account from unauthorized access.
                            </div>
                        </div>
                    </div>
                </div>

                    <div class="col-md-4 mt-3">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Security Settings</div>
                            <div class="card-body d-flex flex-column justify-content-start">
                                <button class="btn btn-primary" id="view-activity">View Recent Activity</button>
                                <button class="btn btn-primary mt-3" id="logout-dev">Log out From Other
                                    Devices</button>
                                <button class="btn btn-primary mt-3" id="backup-codes">Backup Codes</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mt-3">
                        <div class="card h-100">
                            <div class="card-header d-flex justify-content-between align-items-center fw-bold">Notification Settings
                                <button type="submit" class="btn btn-primary w-25">Manage</button>
                            </div>

                            <div class="card-body d-flex flex-column justify-content-start">
                                <p>Email notifications: </p>
                                <p>Notification Timing</p>
                                <p>Alert Types: </p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mt-3">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Data Export and Import</div>
                            <div class="card-body d-flex flex-column justify-content-start">
                                <button class="btn btn-primary mt-3" id="logout-dev">Import Data</button>
                                <button class="btn btn-secondary mt-3" id="backup-codes">Export Data</button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mt-3">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Backup and Restore</div>
                            <div class="card-body d-flex flex-column justify-content-start">
                                <button class="btn btn-primary mt-3" id="logout-dev">Backup Data</button>
                                <button class="btn btn-danger mt-3" id="backup-codes">Restore Data</button>
                                <button class="btn btn-secondary mt-3" id="backup-codes">Schedule Backup</button>

                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mt-3">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Support and Contact</div>
                            <div class="card-body d-flex flex-column justify-content-start">
                                <div class="mb-3">
                                    <h5>Help Center</h5>
                                    <p>Find answers to common questions and troubleshoot issues.</p>
                                    <a href="/help-center" class="btn btn-info">Visit Help Center</a>
                                </div>
                                <div class="mb-3">
                                    <h5>Contact Us</h5>
                                    <p>If you have any questions or need assistance, please fill out the contact form.
                                    </p>
                                    <a href="/contact-form" class="btn btn-primary">Contact Form</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mt-3">
                        <div class="card h-100">
                            <div class="card-header fw-bold">Billing</div>
                            <div class="card-body d-flex flex-row justify-content-start card-content mt-5">
                                <div class="card-item me-3 ">
                                    <h5>Billing Overview</h5>
                                    <p>View your current billing informations</p>
                                    <a href="/billing-overview" class="btn btn-primary">View Overview</a>
                                </div>

                                <div class="card-item ms-3">
                                    <h5>Payment Methods</h5>
                                    <p>Manage and update your payment methods.</p>
                                    <a href="/payment-methods" class="btn btn-primary">Manage Payment</a>
                                </div>

                                <div class="card-item ms-3">
                                    <h5>Subscription Plan</h5>
                                    <p>View details about your current subscription plan.</p>
                                    <a href="/subscription-plan" class="btn btn-primary">View Subscription</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

@code {
    private PasswordDetails userPassword { get; set; } = new PasswordDetails();
    private AccountDetails user { get; set; } = new AccountDetails();
    private Dictionary<int, bool> passwordVisibility = new Dictionary<int, bool>(); 
    private bool Is2FAEnabled = false;
    private bool isAuthenticated;
    private string? oldPassword;
    private string? newPassword;
    private bool isEditing = false;
    private bool PasswordChangeSuccess;
    private DateTime dateOfPassword;
    private bool HasPasswordBeenChangedThisMonth;
    private bool WantToEdit = false;


    private void HandleValidSubmit() 
    {
        
    }

    private void EditPersonalInfo()
    {
        
        WantToEdit = !WantToEdit;
        StateHasChanged(); 
        
    }

    private void EditUser()
    {
        isEditing = true;
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private async Task HandleEdit()
    {
        await SaveUserAsync(user);
        isEditing = false;
    }

    private Task SaveUserAsync(AccountDetails user)
    {
        return Task.CompletedTask;
    }


        private async Task SaveUserEdit()
    {
        user.DateOfBirth = user.DateOfBirth.Date;
        var client = HttpClientFactory.CreateClient("ApiClient");
        var response = await client.PutAsJsonAsync($"api/AccountDetails/{user.Id}", user);
        if (response.IsSuccessStatusCode)
        {
            await LoadUserData();
            isEditing = false;
        }
        else
        {
            Console.WriteLine($"Failed to save user edit. Status Code: {response.StatusCode}");
        }
    }

    private async Task LoadUserData()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        user = await client.GetFromJsonAsync<AccountDetails>($"api/AccountDetails/{user.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            var isAuthenticated = currentUser.Identity.IsAuthenticated;
            Console.WriteLine($"Is user authenticated: {isAuthenticated}");


            isAuthenticated = currentUser.Identity.IsAuthenticated;

            if (isAuthenticated)
            {
                var userIdClaim = currentUser.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userIdClaim))
                {
                    var httpClient = HttpClientFactory.CreateClient("ApiClient");
                    var url = $"api/UserDetails/{userIdClaim}";
                    Console.WriteLine($"Requesting URL: {url}");

                    var result = await httpClient.GetFromJsonAsync<AccountDetails>(url);

                    if (result != null)
                    {
                        user = result;
                        Console.WriteLine("User data loaded successfully.");
                    }
                    else
                    {
                        Console.WriteLine("User not found or API returned null.");
                    }
                }
                else
                {
                    Console.WriteLine("UserId claim is missing.");
                }

            }
            else
            {
                Console.WriteLine("User is not authenticated.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HttpRequestException: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task ChangePassword()
    {
        if(HasPasswordBeenChangedThisMonth == true)
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "You can change your password only once per month.",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "OK",
                Timer = 5000
            });
            return;
        } else {
                var changePasswordDto = new ChangePasswordDto
                {
                    OldPassword = oldPassword,
                    NewPassword = newPassword,
                    DateOfChange = dateOfPassword,
                    HasBeenChangedThisMonth = HasPasswordBeenChangedThisMonth

                };

                var response = await HttpClientFactory.CreateClient("ApiClient")
                    .PutAsJsonAsync($"api/AccountDetails/{user.Id}/change-password", changePasswordDto);

                if(response.IsSuccessStatusCode)
                {
                    var result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirmation",
                        Text = "Your password has been changed successfully.",
                        Icon = SweetAlertIcon.Success,
                        ConfirmButtonText = "OK",
                        Timer = 5000
                    });
                    PasswordChangeSuccess = true;
                


                    oldPassword = string.Empty;	
                    newPassword = string.Empty;

                    StateHasChanged();

                } else {
                    var result = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Incorrect password. Please try again.",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "OK",
                        Timer = 5000
                    });
                    PasswordChangeSuccess = false;
                    
                }
            }
    } 

    private async Task GenerateCustomerId()
    {
            try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/AccountDetails", user);

            if (response.IsSuccessStatusCode)
            {
                var createdUser = await response.Content.ReadFromJsonAsync<AccountDetails>(); // Získání vytvořeného uživatele včetně CustomerId
                user = createdUser; // Aktualizace uživatelského modelu
                await JSRuntime.InvokeVoidAsync("alert", "Customer created successfully.");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Exception: {ex.Message}");
        }
    } 

    private async Task GenerateAccountId()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            var response = await client.PostAsJsonAsync("api/AccountDetails", user);

            if (response.IsSuccessStatusCode)
            {
                var createdUser = await response.Content.ReadFromJsonAsync<AccountDetails>(); // Získání vytvořeného uživatele včetně CustomerId
                user = createdUser; // Aktualizace uživatelského modelu
                await JSRuntime.InvokeVoidAsync("alert", "Account Id created successfully.");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Exception: {ex.Message}");
        }
    }
    private void TimeChecker()
    {
        
    }

    private async Task EditUserInfo()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsync($"api/AccountDetails/{user.Id}", new StringContent(JsonSerializer.Serialize(user), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await LoadUserData(); 
            WantToEdit = false; 
            StateHasChanged();
        }
        else
        {
           
        }
    }

    private async Task Disable2FA()
    {
        user.TwoFactorEnabled = false;  

        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsync($"api/AccountDetails/{user.Id}", 
            new StringContent(JsonSerializer.Serialize(user), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await LoadUserData();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine($"Error: {response.ReasonPhrase}");
        }
    }

       private bool IsPasswordVisible(int userId)
    {
        return passwordVisibility.ContainsKey(userId) && passwordVisibility[userId];
    }

    private void TogglePasswordVisibility(int userId)
    {
        if (passwordVisibility.ContainsKey(userId))
        {
            passwordVisibility[userId] = !passwordVisibility[userId];
        }
        else
        {
            passwordVisibility[userId] = true;
        }
    }
}



