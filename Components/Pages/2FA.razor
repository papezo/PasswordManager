@page "/2FA"
@rendermode InteractiveServer
@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using WebApp.Dto
@using WebApp.Models
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using QRCoder
@using OtpNet

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal

<PageTitle>2FA</PageTitle>

<main class="w-100">
    <div class="d-flex flex-column align-items-center p-5 text-secondary-emphasis bg-dark min-vh-100">
        <div class="position-relative m-4 w-50">
            <div class="progress" role="progressbar" aria-label="Progress" aria-valuenow="@progressValue"
                aria-valuemin="0" aria-valuemax="100" style="height: 2px;">
                <div class="progress-bar bg-primary" style="width: @progressValue%"></div>
            </div>

            <button type="button"
                class="position-absolute top-0 start-0 translate-middle btn btn-sm @(progressValue >= 33 ? "btn-primary" : "btn-secondary") rounded-pill"
                style="width: 2rem; height:2rem;">1</button>

            <button type="button"
                class="position-absolute top-0 start-50 translate-middle btn btn-sm @(progressValue >= 66 ? "btn-primary" : "btn-secondary") rounded-pill"
                style="width: 2rem; height:2rem;">2</button>

            <button type="button"
                class="position-absolute top-0 start-100 translate-middle btn btn-sm @(progressValue == 100 ? "btn-primary" : "btn-secondary") rounded-pill"
                style="width: 2rem; height:2rem;">3</button>
        </div>
        <div class="mb-4">
            <h3 class="text-center mt-5 mb-5 text-white">@TopText</h3>
            <div class="bg-body-tertiary p-5">
                @if (!_isFirstSetupComplete)
                {
                    <h4 class="text-dark">Setup authenticator app</h4>
                    <p>Authenticator apps and browser extensions like Authy, Google Authenticator... generate one-time
                        passwords that <br>are used as a second factor to verify your identity when prompted during sign-in.
                    </p>
                    <h5 class="text-dark">Scan the QR Code below</h5>
                    <p>Use an authenticator app to scan the code and enable 2FA for your account.</p>
                    @if (_qrCodeSvg != null)
                    {
                        <div>@((MarkupString)_qrCodeSvg)</div>
                    }
                    <h6 class="text-dark mt-3">Unable to scan the code?</h6>
                    <p>Use the setup key to manually configure your authenticator app.</p>
                    <p><strong>Setup Key:</strong> @setupKey</p>
                    <div class="text-center d-flex justify-content-center align-items-center flex-column">
                        <label for="verifyQR" class="form-label fw-bold mt-3">Verify the Code From The App</label>
                        <input type="text" class="mt-3 text-center form-control w-25" id="verifyQR" placeholder="XXXXXX" @bind="verificationCode" />
                        <button type="submit" class="btn btn-success mt-3" @onclick="VerifyTheCode">Verify The Code</button>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-center align-items-center mt-3">
                        <a href="/Account" class="btn btn-danger me-3 p-2" role="button">Cancel</a>
                        <button class="btn btn-success p-2" id="setup-2fa-btn" @onclick="Continue">Continue</button>
                    </div>
                }
                else if (!_IsSecondSetupComplete)
                {
                    <div class="container">
                        <h3>Download Your Recovery Codes</h3>
                        <p>In case you lose access to your device with Authentication Application you can use recovery
                            codes.
                            <br> Keep in mind these codes are one-time use only.
                        </p>
                        <div class="alert alert-info mt-4" role="alert">
                            <i class="bi bi-info-circle me-2"></i>
                            <strong>Information<br></strong> Save your recovery codes in a safe place. You will not be able
                            to
                            recover your account without them.
                        </div>
                        <div class="row">
                            @for (int i = 0; i < recoveryCodes.Count; i++)
                            {
                                <div class="col-6 col-md-4 mb-2">
                                    <div class="p-2 border bg-light">
                                        @recoveryCodes[i]
                                    </div>
                                </div>
                            }
                            <div class="d-flex justify-content-end mt-3 mb-2">
                                <button class="btn btn-success" style="width: 5vh;"><i class="bi bi-download"></i></button>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-center align-items-center mt-3">
                                <button class="btn btn-success p-2" id="setup-2fa-btn"
                                    @onclick="ContinueToLast">Continue</button>
                            </div>
                        </div>
                    </div>
                }
                else  
                {
                    <div class="container">
                        <h3 class="">Consider Configuring Additional 2FA Methods</h3>
                        <p class="mt-3">Adding a backup 2FA method will help you gain access to your account in case you
                            lose your device and recovery codes.</p>
                        <div class="col-3 col-md-12 mt-4 mb-3">
                            <div class="p-2 border bg-light">
                                <div class="d-flex align-items-center mb-4">
                                    <span
                                        class="me-4 border p-2 rounded-circle d-flex justify-content-center align-items-center text-primary border-primary"
                                        style="width: 50px; height: 50px;">
                                        <i class="bi bi-envelope-fill"></i>
                                    </span>
                                    <div class="flex-grow-1">
                                        <label for="emailVerification" class="form-label mb-1 fw-bold">Email
                                            verification</label>
                                        <p class="text-muted italic-text">Recommended</p>
                                        <p class="mb-0">Use the security code sent to your email address as your two-factor
                                            authentication.
                                            The <br>security code will be send to the address associated with your account.
                                        </p>
                                    </div>
                                    <button type="submit" class="btn btn-outline-primary ms-4">Set Up</button>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex flex-column align-items-start mt-5">

                            <div class="col-3 col-md-12 mb-3">
                                <div class="p-2 border bg-light">
                                    <div class="d-flex align-items-center mb-4">
                                        <span
                                            class="me-4 border p-2 rounded-circle d-flex justify-content-center align-items-center text-primary border-primary"
                                            style="width: 50px; height: 50px;">
                                            <i class="bi bi-telephone-fill"></i>
                                        </span>
                                        <div class="flex-grow-1">
                                            <label for="phoneNumber" class="form-label mb-1 fw-bold">Add Mobile
                                                Number</label>
                                            <p class="text-muted italic-text">Recommended</p>
                                            <p class="mb-0">Use your phone number as your two-factor authentication. You
                                                will need to provide <br> the security code we send you via SMS message</p>
                                        </div>
                                        <button type="submit" class="btn btn-outline-primary mt-3 ms-4">Set Up</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-center align-items-center mt-3">
                            <button class="btn btn-success p-2.5" id="setup-2fa-btn" @onclick="Finish2FA">Finish</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</main>

@code {
    private string _qrCodeSvg;
    private string setupKey;
    private bool _isFirstSetupComplete = false;
    private bool _IsSecondSetupComplete = false;
    private AccountDetails user { get; set; } = new AccountDetails();
    private bool TwoFactorEnabled = false;
    private List<string> recoveryCodes = new List<string>();
    private string TopText;
    private bool IsAbleToContinue = false;
    private string verificationCode = string.Empty;
    private int progressValue = 0;

    protected override void OnInitialized()
    {
        TopText = "Enable Two-Factor Authentication";
        GenerateQrCode();
        GenerateRecoveryCodes();
        LoadUserData();
        LoadData();
    }

    private async Task LoadData()
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        user = await client.GetFromJsonAsync<AccountDetails>($"api/AccountDetails/{user.Id}");
    }

    private async Task LoadUserData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaims = authState.User;

        if (userClaims.Identity != null && userClaims.Identity.IsAuthenticated)
        {
            var userIdClaim = userClaims.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                user.Id = int.Parse(userIdClaim.Value);
                await LoadData();
            }
        }
    }

    private void GenerateQrCode()
    {
        setupKey = GenerateRandomKey();

        var issuer = "PasswordManager";
        var accountEmail = $"{user.Email}";

        var otpauthUri =
            $"otpauth://totp/{Uri.EscapeDataString(issuer)}:{Uri.EscapeDataString(accountEmail)}?secret={setupKey}&issuer={Uri.EscapeDataString(issuer)}";

        using (var qrGenerator = new QRCodeGenerator())
        {
            var qrCodeData = qrGenerator.CreateQrCode(otpauthUri, QRCodeGenerator.ECCLevel.Q);
            var svgQRCode = new SvgQRCode(qrCodeData);
            _qrCodeSvg = svgQRCode.GetGraphic(4);
        }
    }

    private void GenerateRecoveryCodes()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
        var random = new Random();

        recoveryCodes = new List<string>();
        for (int i = 0; i < 12; i++)
        {
            string code;
            do
            {
                code = new string(Enumerable.Repeat(chars, 10)
                .Select(s => s[random.Next(s.Length)])
                .ToArray());
            } while (recoveryCodes.Contains(code));
            recoveryCodes.Add(code);
        }
    }

    private string GenerateRandomKey()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 16).Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private void Continue()
    {
        _isFirstSetupComplete = true;
        TopText = "Enable Two-Factor Authentication";
        progressValue = 50;
        _qrCodeSvg = null;
        setupKey = null;
        StateHasChanged();
    }

    private async Task ContinueToLast()
    {
        if (_isFirstSetupComplete)
        {
            var client = HttpClientFactory.CreateClient("ApiClient");
            progressValue = 100;

            try
            {
                var userResponse = await client.GetFromJsonAsync<AccountDetails>($"api/AccountDetails/{user.Id}");

                if (userResponse != null)
                {
                    user = userResponse;
                    user.TwoFactorEnabled = true;

                    var updateResponse = await client.PutAsJsonAsync($"api/AccountDetails/{user.Id}", user);

                    if (updateResponse.IsSuccessStatusCode)
                    {
                        _IsSecondSetupComplete = true;
                        
                        StateHasChanged();
                    }
                    else
                    {
                        var errorContent = await updateResponse.Content.ReadAsStringAsync();
                        await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = $"Failed to update 2FA settings. Error: {errorContent}",
                            Icon = SweetAlertIcon.Error,
                            ConfirmButtonText = "OK"
                        });
                    }
                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "User details could not be retrieved. Please try again.",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "OK"
                    });
                }
            }
            catch (Exception ex)
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"An error occurred: {ex.Message}",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "OK"
                });
            }
        }
    }

    private void Finish2FA()
    {
        NavigationManager.NavigateTo("/Account");
    }

    private async Task VerifyTheCode()
    {
        if (string.IsNullOrWhiteSpace(verificationCode))
        {
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "Please enter the verification code.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonText = "OK"
            });
            return;
        }

        try
        {
            var otpKey = setupKey; // Použití raw klíče
            var totp = new Totp(Base32Encoding.ToBytes(otpKey)); // Konverze na byte array

            if (totp.VerifyTotp(verificationCode, out long timeStepMatched, new VerificationWindow(2, 2)))
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Success",
                    Text = "The verification code you entered is correct.",
                    Icon = SweetAlertIcon.Success,
                    ConfirmButtonText = "OK"
                });
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "The verification code you entered is incorrect. Please try again.",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "OK"
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during verification: {ex.Message}");
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "An error occurred during verification. Please try again later.",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "OK"
            });
        }
    }
}
}