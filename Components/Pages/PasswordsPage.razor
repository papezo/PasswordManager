@page "/PasswordsPage"

@rendermode InteractiveServer


@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using WebApp.Dto
@using WebApp.Models
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal


<PageTitle>Passwords</PageTitle>



<div class="container-fluid d-flex p-0 min-vh-100">
    <nav class="d-flex flex-column bg-dark border-end" style="width: 160px;">
        <ul class="navbar-nav flex-column">
            <li class="nav-item p-2 border-bottom">
                <i class="bi bi-speedometer2 text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link active text-white ms-4" aria-current="page" href="/HomeManager">Dashboard</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-lock text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/PasswordsPage">Passwords</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-book text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/SecurityTips">Security Tips</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-patch-check text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/Validator">Validator</a>
                </i>
            </li>
            <p class="navbar-brand p-2 text-white mt-3 fs-5 ms-4">Settings</p>
            <li class="nav-item p-2 mt-2 border-bottom border-top">
                <i class="bi bi-person-circle text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/Account">Account</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-chat-right text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/Support">Support</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-box-arrow-left text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/logout">Log Out</a>
                </i>
            </li>
        </ul>
    </nav>


    <main class="d-flex flex-column flex-grow-1 bg-dark text-white">
    <div class="d-flex flex-column align-items-center justify-content-center flex-grow-1">
        <!-- Sekce Add a New Password a New Section vedle sebe -->
        <div class="d-flex flex-row justify-content-center align-items-start w-100">
            <!-- Stávající oddíl (Formulář) -->
            <div class="d-flex flex-column p-3 bg-dark text-white" style="width: 45%; max-width: 800px;">
                <div class="container-fluid">
                    <h4 class="mb-4">Add a new password</h4>
                    <EditForm Model="@userPassword" OnValidSubmit="CreatePassword" FormName="CreatePassword">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Service Name</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-app-indicator"></i>
                                </span>
                                <InputText type="text" id="username" class="form-control" @bind-Value="userPassword.Name" placeholder="Service Name" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-envelope-at"></i>
                                </span>
                                <InputText type="text" id="email" class="form-control" @bind-Value="userPassword.Email" placeholder="Email" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Email)" />
                        </div>

                       <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <InputText type="password" id="password" class="form-control" @bind-Value="userPassword.Password" placeholder="Password" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Password)" />
                        </div>

                        <div class="mb-3">
                            <label for="twofactor" class="form-label">2FA</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi-shield-lock"></i>
                                </span>
                                <InputSelect id="twofactor" @bind-Value="userPassword.PasswordHas2FA" class="form-select">
                                    <option value="none" selected="selected" disabled>Select a choice</option>
                                    <option value="true">Enabled</option>
                                    <option value="false">Disabled</option>
                                </InputSelect>
                            </div>
                        </div>


                        <div class="mb-3">
                            <label for="category" class="form-label">Category</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-tag"></i>
                                </span>
                                <InputSelect id="category" @bind-Value="userPassword.Category" class="form-select">
                                    <option disabled selected>Select a category</option>
                                    @foreach(var category in Categories) 
                                    {
                                        <option value="@category">@category</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-sticky"></i>
                                </span>
                                <InputText type="text" id="description" class="form-control" @bind-Value="userPassword.Description" placeholder="Description" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Description)" />
                        </div>

                        
                        <!-- Button Container -->
                        <div class="d-flex justify-content-between mt-3">
                        <button type="submit" class="btn btn-primary">Add Password</button>
                        <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                            Password Generator
                        </button>
                    </div>
                    </EditForm>
                </div>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5 text-black" id="exampleModalLabel">Password Generator</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <label for="numericInput" class="form-label text-black">Enter a password length</label>
                        <input type="number" class="form-control" id="numericInput" @bind="passwordLength" placeholder="Enter a number" min="12" max="30">
                        <button type="button" class="btn btn-primary mt-3" @onclick="GeneratePassword">Generate Password</button>
                        @if(GeneratePassword != null)
                        {
                            <p class="mt-3 text-black">Generated Password:  <b>@generatedPassword</b></p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" @onclick="CopyTextToClipboard">Copy</button>
                        @if(IsCopied)
                        {
                            <div class="modal-footer">
                                <p class="mt-3 text-black">Password copied to clipboard!</p>
                            </div>
                            
                        }
                    </div>
                    </div>
                </div>
                </div>

            <!-- Nový oddíl (Sekce) -->
            <div class="d-flex flex-column p-3 bg-dark text-white ms-5" style="width: 50%; max-width: 700px;">
                <div class="container-fluid">
                     <h4 class="mb-4">Tips for Creating Strong Passwords</h4>
                    <p>Creating strong passwords is crucial for keeping your accounts secure. Here are some tips to help you craft passwords that are harder to crack:</p>
                    <ul>
                        <li><strong>Use a Long Password:</strong> Aim for at least 12 characters. The longer the password, the more difficult it is to crack.</li>
                        <li><strong>Mix Characters:</strong> Include a combination of uppercase letters, lowercase letters, numbers, and special characters (e.g. #, $).</li>
                        <li><strong>Avoid Common Words:</strong> Steer clear of easily guessable words or phrases, such as "password," "123456," or your name.</li>
                        <li><strong>Use Passphrases:</strong> Consider using a passphrase made up of multiple unrelated words. For example, "BlueElephant$River43."</li>
                        <li><strong>Avoid Personal Information:</strong> Do not use personal details like your birthdate, family names, or phone numbers.</li>
                        <li><strong>Use Unique Passwords:</strong> Ensure that each of your accounts has a different password to limit the risk if one is compromised.</li>
                        <li><strong>Change Passwords Regularly:</strong> Update your passwords periodically and immediately if you suspect they might have been exposed.</li>
                        <li><strong>Use our Password Generator:</strong> Our Password Generator will generate for you unique password that contains everything what it should have (Symbols, numbers, special chracters...).</li>
                    </ul>
                    <p>By following these tips, you can significantly enhance your online security and protect your sensitive informations on the Internet.</p>
                </div>             
            </div>
        </div>

        <!-- Saved Passwords Section -->
        <div class="d-flex flex-column p-3 w-100">
            <div class="container mt-5">
               <h4 class="text-center mb-4">Saved Passwords</h4>
                <p class="text-center text-white">All your passwords are stored here. 
                    If the password is more than 30 days old, an exclamation point (!) 
                    will be displayed next to it as a reminder that it needs to be updated. 
                    For your convenience and security, regularly check the status of your passwords 
                    and update them if necessary. All your passwords are encrypted and stored securely.</p>

                   @if(passwords.Any(p => p.IsPasswordOld))
                        {
                            <div class="alert alert-danger alert-dismissible fade show mt-5" role="alert">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>Important:</strong> Some of your passwords are <strong>old</strong> and <strong>not secured</strong>. Please update them as soon as possible.
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
                                <i class="bi bi-check-circle me-2"></i>
                                <strong>Great:</strong> All of your passwords are <strong>secured</strong> and <strong>up-to-date</strong>.
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                
                 
                <br><br>
                <table class="table table-dark table-striped table-hover">
                    <thead>
                        <tr>
                            <th class="text-center">Service Name</th>
                            <th class="text-center">Email</th>
                            <th class="text-center">Password</th>
                            <th class="text-center">2FA</th>
                            <th class="text-center">Category</th>
                            <th class="text-center">Description</th>
                            <th class="text-center">Added At</th>
                            <th class="text-center">Action</th>
                            <th class="text-center">Notifications</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var password in passwords)
                        {
                            <tr class="text-center">
                                <td>@password.Name</td>
                                <td>@password.Email</td>
                                <td class="align-middle">
                                    <span style="display: inline-flex; align-items: center; cursor: pointer;" @onclick="() => TogglePasswordVisibility(password.Id)">
                                        @DisplayPassword(password.Id, password.Password)
                                        <i class="@(IsPasswordVisible(password.Id) ? "bi bi-eye-slash" : "bi bi-eye") ms-3"></i>
                                    </span>
                                </td>
                                <td>@password.PasswordHas2FA</td>
                                <td>@password.Category</td>
                                <td>@password.Description</td>
                                <td>@password.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td class="text-center">
                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => EditPassword(password.Id)">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePassword(password.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                                <td>
                                    @if(password.IsPasswordOld)
                                    {
                                        <span class="badge bg-danger">Needs Update</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">Up-to-date</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </div>
        </div>
    </div>
</main>

</div>


@code {
    private PasswordDetails? userPassword { get; set; } = new PasswordDetails();
    private AccountDetails user {get; set; } = new AccountDetails();
    private List<PasswordDetails> passwords { get; set; } = new List<PasswordDetails>();
    public List<string> Categories = new List<string> { "Social Media", "Email", "Banking", "Shopping", "Work", "Other" };
    public List<string> TwoFactorAuth = new List<string> { "Yes", "No" };
    private Dictionary<int, bool> passwordVisibility = new Dictionary<int, bool>(); // Map for searching passwords visibility. KEY-VALUE(Key=id), (Value=bool(is visible/not visible))
    private int passwordLength;
    private string? generatedPassword;
    private bool IsCopied = false;
    private double MaxPasswordDays = 30;
    [Inject]
    public IClipboard? Clipboard { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            var isAuthenticated = currentUser.Identity.IsAuthenticated;
            Console.WriteLine($"Is user authenticated: {isAuthenticated}");


            isAuthenticated = currentUser.Identity.IsAuthenticated;

            if (isAuthenticated)
            {
                var userIdClaim = currentUser.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userIdClaim))
                {
                    var httpClient = HttpClientFactory.CreateClient("ApiClient");
                    var url = $"api/UserDetails/{userIdClaim}";
                    Console.WriteLine($"Requesting URL: {url}");

                    var result = await httpClient.GetFromJsonAsync<AccountDetails>(url);

                    if (result != null)
                    {
                        user = result;
                        Console.WriteLine("User data loaded successfully.");
                    }
                    else
                    {
                        Console.WriteLine("User not found or API returned null.");
                    }
                }
                else
                {
                    Console.WriteLine("UserId claim is missing.");
                }

            }
            else
            {
                Console.WriteLine("User is not authenticated.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HttpRequestException: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }

        await LoadPasswords();
        await PasswordOldChecker();
        await PasswordScoreCalculator();
        
    }
    private async Task LoadPasswords()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        passwords = await httpClient.GetFromJsonAsync<List<PasswordDetails>>($"api/PasswordDetails/{user.Id}");
    }

    private async Task CreatePassword()
    {
        try
        {
            userPassword.AccountDetailsId = user.Id;
            Console.WriteLine($"Posting PasswordDetails with AccountDetailsId: {userPassword.AccountDetailsId}");

            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PostAsJsonAsync($"api/PasswordDetails/", userPassword);

            if (response.IsSuccessStatusCode)
            {
                await LoadPasswords(); // Reload passwords
                userPassword = new PasswordDetails(); 
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }



    private async Task DeletePassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.DeleteAsync($"api/PasswordDetails/{id}");

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }

    private async Task EditPassword(int id)
    {
        userPassword.AccountDetailsId = user.Id; // Dodělat - nefunguje EDIT

        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsync($"api/PasswordDetails/{id}", new StringContent(JsonSerializer.Serialize(userPassword), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }
    private void TogglePasswordVisibility(int id)
    {
        if (passwordVisibility.ContainsKey(id)) // if password exists in dictionary, switch his status
        {
            passwordVisibility[id] = !passwordVisibility[id];
        }
        else
        {
            passwordVisibility[id] = true; // if password is not in dictionary, add him with default visibility status
        }
    }
     private bool IsPasswordVisible(int userId)
    {
        return passwordVisibility.ContainsKey(userId) && passwordVisibility[userId];
    }

    private string DisplayPassword(int id, string password)
    {
        return passwordVisibility.ContainsKey(id) && passwordVisibility[id] ? password : HidePassword(password); // returns password in open-format, if is visible, or hidden, or not anything
    }

    private string HidePassword(string password)
    {
        return new string('*', password.Length); // Hides Password in *
    }

    private void GeneratePassword()
    {
        generatedPassword = PasswordGenerator(passwordLength);    
    }

    private string PasswordGenerator(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; // Valid characters for password

        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task CopyTextToClipboard()
    {
        // Copy text to clipboard
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
        IsCopied = true;
        await Task.Delay(4000);
        IsCopied = false;
    }


    private async Task PasswordOldChecker()
    {
        foreach (var password in passwords)
        {
            if (password.CreatedAt.AddDays(MaxPasswordDays) <= DateTime.Now)
            {
                password.IsPasswordOld = true;
            }
        }
        
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsJsonAsync("api/PasswordDetails/UpdateOldPasswords", passwords); 

        if(response.IsSuccessStatusCode)
        {
            await LoadPasswords();
        }
        
    }

    private async Task PasswordScoreCalculator()
    {
        foreach (var password in passwords)
    {
            var passwordId = password.Id; 
            
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PutAsJsonAsync($"api/PasswordDetails/{passwordId}/calculate-score", password);
        
            if (response.IsSuccessStatusCode)
            {
                await LoadPasswords();
            }
        }
    }
}


