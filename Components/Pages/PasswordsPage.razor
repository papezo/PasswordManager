@page "/PasswordsPage"

@rendermode InteractiveServer

@using System.Text
@using System.Text.Json
@using WebApp.Models
@using System.Net.Http
@using System.Net.Http.Json


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<PageTitle>Passwords</PageTitle>


<!-- 
                                                                    TO BE DONE

                                    1. Fix password generator input (If user enter <0 / <5 length => Automatically change the value )
                                    2. Edit button => API works, button not
                                    3. Add Icons in inputs
                                    4. Import / Export ?
                                    5. Add Password Old checker

-->

<div class="container-fluid d-flex p-0 min-vh-100">
    <nav class="d-flex flex-column bg-dark border-end" style="width: 150px;">
        <a class="navbar-brand p-2 text-white ms-2 fs-5 mt-3" href="#">Management</a>
        <ul class="navbar-nav flex-column mb-2">
            <li class="nav-item p-2 mt-3 border-bottom border-top">                
                <i class="bi bi-speedometer2 text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link active text-white ms-4" aria-current="page" href="/HomeManager">Dashboard</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-lock text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/PasswordsPage">Passwords</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-book text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/SecurityTips">Security Tips</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-patch-check text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/Validator">Validator</a>
                </i>
            </li>
            <p class="navbar-brand p-2 text-white mt-3 fs-5 ms-4">Settings</p>
            <li class="nav-item p-2 mt-2 border-bottom border-top">
                <i class="bi bi-person-circle text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/Account">Account</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-chat-right text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/Support">Support</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2 border-bottom">
                <i class="bi bi-box-arrow-left text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="/">Log Out</a>
                </i>
            </li>
        </ul>
    </nav>

    <main class="d-flex flex-column flex-grow-1 bg-dark text-white">
    <div class="d-flex flex-column align-items-center justify-content-center flex-grow-1">
        <!-- Sekce Add a New Password a New Section vedle sebe -->
        <div class="d-flex flex-row justify-content-center align-items-start w-100">
            <!-- Stávající oddíl (Formulář) -->
            <div class="d-flex flex-column p-3 bg-dark text-white" style="width: 45%; max-width: 800px;">
                <div class="container-fluid">
                    <h4 class="mb-4">Add a new password</h4>
                    <EditForm Model="@userPassword" OnValidSubmit="CreatePassword" FormName="CreatePassword">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Service Name</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-app-indicator"></i>
                                </span>
                                <InputText type="text" id="username" class="form-control" @bind-Value="userPassword.Name" placeholder="Service Name" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-envelope-at"></i>
                                </span>
                                <InputText type="text" id="email" class="form-control" @bind-Value="userPassword.Email" placeholder="Email" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Email)" />
                        </div>

                       <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <InputText type="password" id="password" class="form-control" @bind-Value="userPassword.Password" placeholder="Password" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Password)" />
                        </div>

                        <div class="mb-3">
                            <label for="category" class="form-label">Category</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-tag"></i>
                                </span>
                                <InputSelect id="category" @bind-Value="userPassword.Category" class="form-select">
                                    <option disabled selected>Select a category</option>
                                    @foreach(var category in Categories) 
                                    {
                                        <option value="@category">@category</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-sticky"></i>
                                </span>
                                <InputText type="text" id="description" class="form-control" @bind-Value="userPassword.Description" placeholder="Description" />
                            </div>
                            <ValidationMessage For="@(() => userPassword.Description)" />
                        </div>

                        <!-- Button Container -->
                        <div class="d-flex justify-content-between mt-3">
                        <button type="submit" class="btn btn-primary">Add Password</button>
                        <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#exampleModal">
                            Password Generator
                        </button>
                    </div>
                    </EditForm>
                </div>
            </div>

            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5 text-black" id="exampleModalLabel">Password Generator</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <label for="numericInput" class="form-label text-black">Enter a password length</label>
                        <input type="number" class="form-control" id="numericInput" @bind="passwordLength" placeholder="Enter a number" min="12" max="30">
                        <button type="button" class="btn btn-primary mt-3" @onclick="GeneratePassword">Generate Password</button>
                        @if(GeneratePassword != null)
                        {
                            <p class="mt-3 text-black">Generated Password:  <b>@generatedPassword</b></p>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-success" @onclick="CopyTextToClipboard">Copy</button>
                        @if(IsCopied)
                        {
                            <div class="modal-footer">
                                <p class="mt-3 text-black">Password copied to clipboard!</p>
                            </div>
                            
                        }
                    </div>
                    </div>
                </div>
                </div>

            <!-- Nový oddíl (Sekce) -->
            <div class="d-flex flex-column p-3 bg-dark text-white ms-5" style="width: 50%; max-width: 700px;">
                <div class="container-fluid">
                     <h4 class="mb-4">Tips for Creating Strong Passwords</h4>
                    <p>Creating strong passwords is crucial for keeping your accounts secure. Here are some tips to help you craft passwords that are harder to crack:</p>
                    <ul>
                        <li><strong>Use a Long Password:</strong> Aim for at least 12 characters. The longer the password, the more difficult it is to crack.</li>
                        <li><strong>Mix Characters:</strong> Include a combination of uppercase letters, lowercase letters, numbers, and special characters (e.g. #, $).</li>
                        <li><strong>Avoid Common Words:</strong> Steer clear of easily guessable words or phrases, such as "password," "123456," or your name.</li>
                        <li><strong>Use Passphrases:</strong> Consider using a passphrase made up of multiple unrelated words. For example, "BlueElephant$River43."</li>
                        <li><strong>Avoid Personal Information:</strong> Do not use personal details like your birthdate, family names, or phone numbers.</li>
                        <li><strong>Use Unique Passwords:</strong> Ensure that each of your accounts has a different password to limit the risk if one is compromised.</li>
                        <li><strong>Change Passwords Regularly:</strong> Update your passwords periodically and immediately if you suspect they might have been exposed.</li>
                        <li><strong>Use our Password Generator:</strong> Our Password Generator will generate for you unique password that contains everything what it should have (Symbols, numbers, special chracters...).</li>
                    </ul>
                    <p>By following these tips, you can significantly enhance your online security and protect your sensitive informations on the Internet.</p>
                </div>
            </div>
        </div>

        <!-- Saved Passwords Section -->
        <div class="d-flex flex-column p-3 w-100">
            <div class="container mt-5">
                <h4 class="mb-4">Saved Passwords</h4>
                <p>All of your passwords are <strong>up to date</strong> and <strong>secured</strong>.</p>
                <em class="italic-text">Passwords that are 30 or more days old will be marked with an Exclamation Mark (!).</em>
                <br><br>
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>Service Name</th>
                            <th>Email</th>
                            <th>Password</th>
                            <th>Category</th>
                            <th>Description</th>
                            <th>Added At</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var password in passwords)
                        {
                            <tr class="@((password.IsPasswordOld ? "table-danger" : ""))">
                                <td>@password.Name</td>
                                <td>@password.Email</td>
                                <td class="align-middle">
                                    <span style="display: inline-flex; align-items: center;">
                                        @DisplayPassword(password.Id, password.Password)
                                        <i class="bi bi-eye ms-3" style="cursor: pointer;" @onclick="() => TogglePasswordVisibility(password.Id)"></i>
                                    </span>
                                </td>

                                <td>@password.Category</td>
                                <td>@password.Description</td>
                                <td>@password.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => EditPassword(password.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePassword(password.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</main>

</div>


@code {
    private PasswordDetails userPassword { get; set; } = new PasswordDetails();
    private List<PasswordDetails> passwords { get; set; } = new List<PasswordDetails>();
    public List<string> Categories = new List<string> { "Social Media", "Email", "Banking", "Shopping", "Work", "Other" };
    private Dictionary<int, bool> passwordVisibility = new Dictionary<int, bool>(); // Map for searching passwords visibility. KEY-VALUE(Key=id), (Value=bool(is visible/not visible))
    private int passwordLength;
    private string generatedPassword;
    private bool IsCopied = false;

    private int MaxPasswordDays = 30;

    [Inject]
    public IClipboard Clipboard { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPasswords();
        await PasswordMonitor();
    }

    private async Task LoadPasswords()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        passwords = await httpClient.GetFromJsonAsync<List<PasswordDetails>>("api/PasswordDetails");
    }

    private async Task CreatePassword()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PostAsJsonAsync("api/PasswordDetails", userPassword);

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
            userPassword = new PasswordDetails(); 
        }
        else
        {
            // Do nothing
        }
    }

    private async Task DeletePassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.DeleteAsync($"api/PasswordDetails/{id}");

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }

    private async Task EditPassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsync($"api/PasswordDetails/{id}", new StringContent(JsonSerializer.Serialize(userPassword), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }
    private void TogglePasswordVisibility(int id)
    {
        if (passwordVisibility.ContainsKey(id)) // if password exists in dictionary, switch his status
        {
            passwordVisibility[id] = !passwordVisibility[id];
        }
        else
        {
            passwordVisibility[id] = true; // if password is not in dictionary, add him with default visibility status
        }
    }
    private string DisplayPassword(int id, string password)
    {
        return passwordVisibility.ContainsKey(id) && passwordVisibility[id] ? password : HidePassword(password); // returns password in open-format, if is visible, or hidden, or not anything
    }

    private string HidePassword(string password)
    {
        return new string('*', password.Length); // Hides Password in *
    }

    private void GeneratePassword()
    {
        generatedPassword = PasswordGenerator(passwordLength);    
    }

    private string PasswordGenerator(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; // Valid characters for password

        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task CopyTextToClipboard()
    {
        // Copy text to clipboard
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
        IsCopied = true;
        await Task.Delay(4000);
        IsCopied = false;
    }

    private async Task PasswordMonitor()
    {
        foreach (var passwordOld in passwords)
        {
            passwordOld.IsPasswordOld = passwordOld.CreatedAt.AddDays(MaxPasswordDays) < DateTime.Now;
        }
    }
}
