@page "/PasswordsPage"

@rendermode InteractiveServer


@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using System.Security.Cryptography
@using WebApp.Dto
@using WebApp.Models
@using WebApp.Security
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal
@inject IConfiguration Configuration





<PageTitle>Passwords</PageTitle>

<div class="container-fluid d-flex @(isDarkMode ? "dark-mode" : "light-mode") min-vh-100">

    <!-- Sidebar -->
    <nav class="sidebar-nav d-flex flex-column" style="width: 400px; height: 100vh;">
      <!-- Logo -->
      <div class="text-center mb-5">
        @if(isDarkMode == false)
        {
        <img src="images/plart3.png" alt="Security" width="250" class="">
        } else {
        <img src="images/plart4.png" alt="Security" width="250" class="">
        }
      </div>

      <!-- User Profile -->
      <div class="user-profile  p-4">
      <div class="d-flex align-items-center gap-3 p-3 rounded-4 profile-card">
        <img src="images/user.png" alt="User Avatar" class="rounded-circle border shadow-sm" width="45">
        <div class="flex-grow-1">
        <h6 class="mb-0 fw-semibold ">@user.FullName</h6>
        <small class="text-primary">Admin</small>
        </div>
      </div>
      </div>

      <!-- Main Navigation -->
      <div class="main-nav mb-4 p-4">
      <ul class="nav flex-column gap-2">
      <h6 class="text-muted text-uppercase ms-2 mb-3 fw-semibold">
        <i class="bi bi-list me-2"></i> Menu
      </h6>
        <li class="nav-item">
        <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/HomeManager">
          <i class="bi bi-speedometer2 me-3 text-primary"></i> Dashboard
        </a>
        </li>
        <li class="nav-item">
        <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/PasswordsPage">
          <i class="bi bi-lock me-3 text-primary"></i> Passwords
        </a>
        </li>
        <li class="nav-item">
        <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/SecurityTips">
          <i class="bi bi-shield-check me-3 text-primary"></i> Security Tips
        </a>
        </li>
        <li class="nav-item">
        <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/Validator">
          <i class="bi bi-patch-check me-3 text-primary"></i> Validator
        </a>
        </li>
      </ul>
      </div>


      <h6 class="text-muted text-uppercase ms-4 fw-semibold">
        <i class="bi bi-shield-lock me-2"></i> Security & Passwords
      </h6>
      <ul class="nav flex-column gap-2 p-4">
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/PasswordsPage">
            <i class="bi bi-key me-3 text-primary"></i> Password Generator
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/SecurityTips">
            <i class="bi bi-exclamation-triangle me-3 text-warning"></i> Breach Checker
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/AutofillSetup">
            <i class="bi bi-browser-chrome me-3 text-primary"></i> Autofill Setup
          </a>
        </li>
      </ul>


      <!-- Bottom Navigation -->
      <div class="bottom-nav mt-auto p-4">
      <h6 class="text-muted text-uppercase mb-3 ms-2 fw-semibold">Settings</h6>
      <ul class="nav flex-column gap-2">
        <li class="nav-item">
        <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/Account">
          <i class="bi bi-person-circle me-3 text-primary"></i> Account
        </a>
        </li>
        <li class="nav-item">
        <a class="nav-link d-flex align-items-center p-3 rounded-3" href="/Support">
          <i class="bi bi-chat-right me-3 text-primary"></i> Support
        </a>
        </li>
          <li class="nav-item">
            <a class="nav-link d-flex align-items-center p-3 rounded-3 logout-link" href="/logout">
              <i class="bi bi-box-arrow-left me-3"></i> Log Out
            </a>
          </li>
        
      </ul>
      </div>
    </nav>


    <div class="top-navbar d-flex flex-column flex-grow-1 min-vh-100">
      <div class="top-navbar d-flex justify-content-between align-items-center px-4 py-3 b2">
        <!-- Left Section -->
        <div class="d-flex align-items-center gap-4">
          <!-- Search Bar with Dropdown -->
          <div class="search-container">
            <div class="search-wrapper">
              <i class="bi bi-search search-icon"></i>
              <input type="text" class="search-input" placeholder="Search passwords, websites, or notes...">
              <button class="search-filter-btn">

              </button>
            </div>
          </div>
        </div>

        <!-- Right Section -->
        <div class="d-flex align-items-center gap-3">
          <!-- Add New Password Button -->
          <button class="btn btn-primary d-flex align-items-center gap-2 add-password-btn">
            <i class="bi bi-plus-lg"></i>
            <span>New Password</span>
          </button>

          <!-- Notifications -->
          <div class="notification-wrapper">
            <button class="notification-btn" data-bs-toggle="dropdown">
              <i class="bi bi-bell fs-5"></i>
              @if(notifications > 0)
              {
                <span class="notification-badge">@notifications</span>
              }
            </button>
            <div class="dropdown-menu notification-dropdown">
              <h6 class="dropdown-header">Notifications</h6>
              <div class="notification-list">
                <a href="#" class="dropdown-item notification-item">
                  <i class="bi bi-shield-exclamation text-warning"></i>
                  <div class="notification-content">
                    <p class="notification-title">Weak Passwords Detected</p>
                    <p class="notification-desc">@weakPasswords.Count passwords need attention</p>
                  </div>
                </a>
                <a href="#" class="dropdown-item notification-item">
                  <i class="bi bi-clock-history text-info"></i>
                  <div class="notification-content">
                    <p class="notification-title">Password Update Required</p>
                    <p class="notification-desc">@outDatedPasswords.Count passwords are outdated</p>
                  </div>
                </a>
              </div>
            </div>
          </div>

          <!-- Theme Toggle -->
          <button class="theme-toggle-btn" @onclick="ToggleTheme">
            <i class="bi @(isDarkMode ? "bi-sun" : "bi-moon-stars") fs-5"></i>
          </button>

          <!-- Help -->
          <button class="help-btn" title="Help & Support">
            <i class="bi bi-question-circle fs-5"></i>
          </button>
        </div>
      </div>

    

    <style>


      .search-container {
        width: 400px;
      }

      .search-wrapper {
        position: relative;
        display: flex;
        align-items: center;
        background: var(--search-bg);
        border-radius: 8px;
        padding: 0.5rem 1rem;
      }

      .search-input {
        border: none;
        background: transparent;
        padding-left: 30px;
        border: 1px solid rgb(70, 69, 69);
        width: 100%;
        color: var(--text-color);
      }

      .search-icon {
        position: absolute;
        left: 1.6rem;
        
        color: #6b7280;
      }

      .search-filter-btn {
        background: transparent;
        border: none;
        color: #6b7280;
        padding: 0.25rem;
        border-radius: 4px;
      }

      .add-password-btn {
        padding: 0.5rem 1rem;
        border-radius: 8px;
      }

      .notification-btn, .theme-toggle-btn, .help-btn {
        background: transparent;
        border: none;
        padding: 0.5rem;
        border-radius: 8px;
        color: var(--text-color);
        position: relative;
      }

      .notification-btn:hover, .theme-toggle-btn:hover, .help-btn:hover {
        background: var(--btn-hover);
      }

      .notification-badge {
        position: absolute;
        top: -5px;
        right: -5px;
        background: #ef4444;
        color: white;
        border-radius: 50%;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        min-width: 20px;
        text-align: center;
      }

      .notification-dropdown {
        width: 320px;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }

      .notification-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem;
        border-radius: 6px;
      }

      .notification-item:hover {
        background: var(--btn-hover);
      }

      .notification-content {
        flex: 1;
      }

      .notification-title {
        margin: 0;
        font-weight: 500;
      }

      .notification-desc {
        margin: 0;
        font-size: 0.875rem;
        color: #6b7280;
      }
      .add-password-btn {
  padding: 0.6rem 1.2rem;
  border-radius: 13px;
  font-weight: 500;
  transition: transform 0.2s ease, background-color 0.2s ease;
}

.add-password-btn:hover {
  transform: scale(1.05);
  background-color: #2563eb;
}



    </style>
    

    
    

        <!-- Confirmation Modal -->
<div class="modal fade" id="deleteLogsModal" tabindex="-1" aria-labelledby="deleteLogsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white border-0 rounded-4 shadow-lg">
            <!-- Header -->
            <div class="modal-header border-bottom border-secondary">
                <h5 class="modal-title fw-bold text-center w-100" id="deleteLogsModalLabel">⚠️ Delete @selectedPassword?.Name Logs</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <!-- Body -->
            <div class="modal-body text-center py-4">
                <p class="fs-5">Are you sure you want to <span class="text-danger fw-bold">delete all logs</span>?<br>This action <u>cannot</u> be undone.</p>
            </div>

            <!-- Footer -->
            <div class="modal-footer border-top border-secondary justify-content-between">
                <!-- Close button -->
                <button type="button" class="btn btn-primary rounded-pill px-4" data-bs-dismiss="modal" data-bs-toggle="modal" data-bs-target="#historyModal">
                    Cancel
                </button>

                <!-- Confirm delete button -->
                <button type="button" class="btn btn-danger rounded-pill px-4" data-bs-dismiss="modal" @onclick="() => DeleteAllLogs(selectedPassword.Id)">
                    <i class="bi bi-trash-fill text-white me-2"></i>Delete All Logs
                </button>
            </div>
        </div>
    </div>
</div>



<!-- Modal for History of Changes -->
      <div class="modal fade" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content bg-dark text-white border-0 rounded-4 shadow">
                    <div class="modal-header border-bottom border-secondary">
                        <h5 class="modal-title fw-bold text-center" id="historyModalLabel">
                            <i class="bi bi-clock-history me-2"></i>History of Changes
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                        <div class="modal-body">
                            @if (passwordChanges != null && passwordChanges.Any())
                            {
                                <div class="list-group">
                                    @foreach (var change in passwordChanges)
                                    {
                                        <div class="list-group-item bg-warning-subtle mb-3 rounded-3 shadow-sm text-white border border-light">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <i class="bi bi-pencil-fill text-white me-2"></i>
                                                    <span class="fw-bold">@change.ActionType</span>
                                                </div>
                                                <span class="text-muted small">
                                                    @change.ChangedAt.ToString("yyyy-MM-dd HH:mm:ss")
                                                </span>
                                            </div>
                                            <hr class="text-light my-2">
                                            <p class="mb-0 text-muted">
                                                <span class="fw-bold">Details:</span> @change.Details
                                            </p>
                                            <small class="text-muted d-block mt-2">
                                                <span class="fw-bold">Changed By: </span><strong class="text-white">@change.ChangedBy</strong> 
                                            </small>
                                            <div class="d-flex align-items-end justify-content-end">
                                                <button type="button" class="btn btn-danger btn-sm" data-bs-dismiss="modal" @onclick="() => DeleteLog(change.Id)">
                                                    <i class="bi bi-trash-fill text-white"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center">
                                    <p class="text-muted fs-5">No changes found for this password.</p>
                                </div>
                            }
                        </div>

                    <div class="modal-footer border-top border-secondary">
                        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteLogsModal">
                            <i class="bi bi-trash-fill text-white me-2"></i>Remove All
                        </button>
                    </div>
                </div>
            </div>
        </div>





<!-- Modal -->
            <div class="modal fade" id="addPasswordModal" tabindex="-1" aria-labelledby="addPasswordModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header justify-content-center">
                            <div class="text-center">
                                <h3 class="modal-title">@((isEditMode ? "Edit Password" : "Add New Password"))</h3>

                            </div>
                            <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@userPassword" OnValidSubmit="CreatePassword" FormName="CreatePassword">
                                <DataAnnotationsValidator />

                                <div class="container">
                                    <div class="row">
                                        <!-- Levý sloupec: Main Information -->
                                        <div class="col-md-6">
                                            <h5 class="text-primary mb-3 text-center">Main Information</h5>
                                            <div class="mb-3">
                                                <label for="username" class="form-label fw-bold">Service Name</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                                                    <InputText type="text" id="username" class="form-control" @bind-Value="userPassword.Name" placeholder="Service Name" />
                                                </div>
                                                <ValidationMessage For="@(() => userPassword.Name)" />
                                            </div>
                                            <div class="mb-3">
                                                <label for="password-email" class="form-label fw-bold">Email</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-envelope-fill"></i></span>
                                                    <InputText type="text" class="form-control" id="email" @bind-Value="userPassword.Email" placeholder="Enter email" />
                                                </div>
                                                <ValidationMessage For="@(() => userPassword.Email)" />
                                            </div>
                                            <div class="mb-3">
                                                <label for="password-category" class="form-label fw-bold">Category</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-folder-fill"></i></span>
                                                    <InputSelect id="category" @bind-Value="userPassword.Category" class="form-select">
                                                        <option disabled selected>Select a category</option>
                                                        @foreach (var category in Categories)
                                                        {
                                                            <option value="@category">@category</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Pravý sloupec: Security Settings -->
                                        <div class="col-md-6">
                                            <h5 class="text-primary mb-3 text-center">Security Settings</h5>
                                            <div class="mb-3">
                                                <label for="password" class="form-label fw-bold">Password</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                                                    <InputText type="@passwordType" class="form-control" id="password" placeholder="Enter password" @bind-Value="userPassword.Password" />
                                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                                        <i class="@(isPasswordVisible ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="mb-3 d-flex align-items-center">
                                                <label for="2FA" class="form-label fw-bold me-3">Two-Factor Authentication</label>
                                                <div class="form-check form-switch">
                                                    <InputCheckbox id="twofactor" class="form-check-input" @bind-Value="userPassword.PasswordHas2FA" />
                                                    <label class="form-check-label" for="twofactor">
                                                        @(userPassword.PasswordHas2FA == true ? "Enabled" : "Disabled")
                                                    </label>
                                                </div>
                                            </div>
                                            @if (userPassword.PasswordHas2FA == true)
                                            {
                                                <div class="">
                                                    <label for="BackupCodes" class="form-label fw-bold">Backup Two-Factor Authentication Code <span class="text-muted">(optional)</span></label>
                                                    <InputText id="BackupCodes" class="form-control" @bind-Value="userPassword.BackUpCodes" placeholder="Enter backup code" />
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Střední sekce: Optional Details -->
                                    <div class="row">
                                        <div class="col-md-8 mx-auto mt-4">
                                            <h5 class="text-primary mb-3 text-center">Optional Details</h5>
                                            <div class="mb-3">
                                                <label for="Notes" class="form-label fw-bold">Notes</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                                                    <InputText class="form-control" id="Notes" @bind-Value="userPassword.Notes" />
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="ImagePath" class="form-label fw-bold">Logo</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-image"></i></span>
                                                    <InputFile id="ImagePath" OnChange="HandleImageUpload" accept=".jpg, .jpeg, .png" />
                                                </div>
                                                @if (!string.IsNullOrEmpty(uploadedImagePreview))
                                                {
                                                    <div class="mt-2">
                                                        <img src="@uploadedImagePreview" alt="Preview" class="img-thumbnail" style="max-width: 200px;" />
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Tlačítka -->
                                    <div class="modal-footer d-flex justify-content-center">
                                        <button type="button" class="btn btn-danger me-5" data-bs-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-success" data-bs-dismiss="modal">@((isEditMode ? "Save Changes" : "Add Password"))</button>

                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
        </div>
    
        <!-- Main Area -->
        <div class="row flex-grow-1 m-0">
            <!-- Left Column -->
        <div class="col-3  p-3 d-flex flex-column">
    <!-- Sorting and Filtering Options -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <!-- Sorting Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-primary btn-sm dropdown-toggle shadow-sm" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-sort-alpha-down"></i> Sort: Name
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark shadow-lg">
                        <li><a class="dropdown-item" href="#"><i class="bi bi-person"></i> Name</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-folder"></i> Category</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-calendar"></i> Date Created</a></li>
                    </ul>
                </div>

                <!-- Show Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle shadow-sm" type="button" data-bs-toggle="dropdown">
                        <i class="bi bi-list"></i> Show: All Records
                    </button>
                    <ul class="dropdown-menu dropdown-menu-dark shadow-lg">
                        <li><a class="dropdown-item" href="#"><i class="bi bi-asterisk"></i> All Records</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-globe"></i> Social Media</a></li>
                        <li><a class="dropdown-item" href="#"><i class="bi bi-envelope"></i> Email</a></li>
                    </ul>
                </div>
            </div>

            <!-- Alphabetical Grouped Password List -->
<div class="alphabet-list flex-grow-1">
    @if (groupedPasswords != null)
    {
        @foreach (var group in groupedPasswords)
        {
            <!-- Heading for each letter group -->
            <h5 class="text-uppercase text-white fw-bold mb-2">@group.Key</h5>
            
            <ul class="list-unstyled mb-4">
                @foreach (var password in group)
                {
                    <li>
                        <a class="d-flex align-items-center p-3 text-decoration-none rounded
                                  @(selectedPassword?.Id == password.Id ? "active text-white" : "")"
                           @onclick="() => SelectPassword(password)">

                            <!-- Password Icon / Favorite Button -->
                            @if (password.ImagePath != null)
                            {
                                <button class="btn btn-sm p-0 me-3" @onclick="() => SetPasswordAsFavorite(password.Id)"
                                        style="width: 30px; height: 30px;">
                                    @if (password.IsFavorite)
                                    {
                                        <i class="bi bi-star-fill text-warning"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star-fill text-white"></i>
                                    }
                                </button>

                                <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(password.ImagePath)}")"
                                     alt="image"
                                     class="me-2 rounded-circle"
                                     width="50" />
                            }
                            else
                            {
                                <img src="images/default-icon.png"
                                     alt="Default"
                                     class="me-3 rounded-circle"
                                     width="50" />
                            }

                            <!-- Password Details -->
                            <div class="d-flex justify-content-between flex-grow-1 align-items-center">
                                <div class="ms-3">
                                    <strong class="fs-4  fw-bold">@password.Name</strong>
                                    <div class="small text-muted fs-6">@password.Email</div>
                                </div>
                                <div class="text-end">
                                    <span class="badge bg-primary">@password.Category</span>
                                    <div class="small text-muted mt-3">
                                        Created: @(password.CreatedAt.ToString("dd/MM/yyyy") ?? "")
                                    </div>
                                    
                                </div>
                                
                            </div>
                            
                            

                        </a>
                       
                    </li>
                    
                }
            </ul>
            <hr class="text-white">
        }
    }
    else
    {
        <p class="text-muted">No passwords found.</p>
    }
</div>

      


                <hr class="text-white">
                <div class="d-flex justify-content-center mt-auto">
                    <button class="btn btn-primary mt-auto w-25" data-bs-toggle="modal" data-bs-target="#addPasswordModal">
                        <i class="bi bi-plus-circle me-2"></i><span class="fw-bold">Add Password</span>
                    </button>
                    <button class="btn btn-danger w-25 ms-5" @onclick="() => DeletePassword(selectedPassword.Id)">
                        <i class="bi bi-trash-fill me-2"></i><span class="fw-bold">Remove</span>
                    </button>
                </div>

                
            </div>

    <div class="col-9 p-3 full-height-container">
    @if (selectedPassword != null)
    {
        <div class="password-details-container mb-4 shadow-lg position-relative">
            
            <!-- HEADER: Logo, Title, Favorite Star, Action Buttons -->
            <div class="password-details-header p-4 d-flex align-items-center justify-content-between">
                <!-- Left: Logo & Name -->
                <div class="d-flex align-items-center">
                    @if (selectedPassword.ImagePath != null)
                    {
                        <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(selectedPassword.ImagePath)}")"
                             alt="Password Logo"
                             class="rounded-circle border border-white me-3 password-logo" />
                    }
                    else
                    {
                        <img src="images/default-icon.png" alt="Default Logo"
                             class="rounded-circle border border-white me-3 password-logo" />
                    }
                    
                    <div>
                        <h2 class="text-white fw-bold mb-1">@selectedPassword.Name</h2>
                        <span class="badge category-badge">@selectedPassword.Category</span>
                    </div>
                </div>

                <!-- Right: Favorite + Action Buttons -->
                <div class="d-flex align-items-center gap-3">
                    <!-- Favorite Star -->
                    <button class="btn btn-sm" @onclick="@(() => SetPasswordAsFavorite(selectedPassword.Id))">
                        @if (selectedPassword.IsFavorite)
                        {
                            <i class="bi bi-star-fill text-warning fs-4"></i>
                        }
                        else
                        {
                            <i class="bi bi-star-fill text-light fs-4"></i> 
                        }
                    </button>

                    <!-- Edit -->
                    <button class="btn btn-primary"
                            data-bs-toggle="modal"
                            data-bs-target="#addPasswordModal"
                            @onclick="OnEditClick">
                        <i class="bi bi-pencil-fill"></i>
                    </button>

                    <!-- Delete -->
                    <button class="btn btn-danger"
                            @onclick="@(() => DeletePassword(selectedPassword.Id))">
                        <i class="bi bi-trash-fill"></i>
                    </button>

                    <!-- History -->
                    <button class="btn btn-info"
                            data-bs-toggle="modal"
                            data-bs-target="#historyModal"
                            @onclick="@(() => LoadHistory(selectedPassword.Id))">
                        <i class="bi bi-clock-history"></i>
                    </button>
                </div>
            </div> <!-- END HEADER -->

            <!-- BODY -->
            <div class="password-details-body p-4">
                

                <!-- First Row: 6 boxes (3 per column) for symmetry -->
                <div class="row g-3">
                    <!-- Left Column -->
                    <div class="col-md-6 d-flex flex-column gap-3">
                        <!-- Email -->
                        <div class="info-box">
                            <h5><i class="bi bi-envelope-fill me-1"></i> Email</h5>
                            <p>@selectedPassword.Email</p>
                        </div>

                        <!-- Password (toggle) -->
                        <div class="info-box d-flex align-items-center justify-content-between">
                            <div>
                                <h5><i class="bi bi-lock-fill me-1"></i> Password</h5>
                                <p class="mb-0">
                                    @(isPasswordVisible ? decryptedPassword : "********")
                                </p>
                            </div>
                            <button class="btn btn-outline-secondary btn-sm" @onclick="TogglePasswordVisibility">
                                <i class="@(isPasswordVisible ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                            </button>
                        </div>

                        <!-- 2FA -->
                        <div class="info-box">
                            <h5>
                                <i class="bi @(selectedPassword.PasswordHas2FA ? "bi-shield-lock-fill" : "bi-shield") me-1"></i>
                                2-Factor Authentication
                            </h5>
                            @if(selectedPassword.PasswordHas2FA)
                            {
                                <span class="badge bg-success">Enabled</span>
                            } else {
                                <span class="badge bg-danger">Disabled</span>
                            }
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div class="col-md-6 d-flex flex-column gap-3">
                        <!-- Created At -->
                        <div class="info-box">
                            <h5><i class="bi bi-calendar-event-fill me-1"></i> Created At</h5>
                            <p>@selectedPassword.CreatedAt.ToString("dd.MM.yyyy HH:mm")</p>
                        </div>

                        <!-- Password Age -->
                        <div class="info-box">
                            <h5><i class="bi bi-hourglass-split me-1"></i> Password Age</h5>
                            @if (selectedPassword.IsPasswordOld)
                            {
                                <span class="badge bg-danger">Over 30 days old</span>
                            }
                            else
                            {
                                <span class="badge bg-success">Recent</span>
                            }
                        </div>

                        <!-- Password Security -->
                        <div class="info-box">
                            <h5><i class="bi bi-key-fill me-1"></i> Password Security</h5>
                            @if (selectedPassword.DuplicatedPassword)
                            {
                                <i class="bi bi-exclamation-triangle-fill text-danger me-1"></i>
                                <strong>Possible Duplicate</strong>
                            }
                            else
                            {
                                <i class="bi bi-check-circle-fill text-success me-1"></i>
                                <strong>Secured</strong>
                            }
                        </div>
                    </div>
                </div> <!-- END row -->

                <!-- Second Row: Full Width for Notes -->
                <div class="row g-3 mt-3">
                    <div class="col-md-12">
                        <div class="info-box">
                            <h5><i class="bi bi-stickies-fill me-1"></i> Notes</h5>
                            <p>@(selectedPassword.Notes ?? "—")</p>
                        </div>
                    </div>
                </div>

                <!-- Password Strength Meter -->
                <div class="mt-5 d-flex flex-column align-items-center text-center">
                    <h3 class="mb-4">Password Strength Meter</h3>

                    <div class="donut-gauge-container">
                        <svg viewBox="0 0 120 120" class="donut-gauge">
                            <g transform="rotate(-90 60 60)">
                                <!-- Gray track -->
                                <circle class="donut-track" cx="60" cy="60" r="50" />
                                <!-- Color ring -->
                                <circle class="donut-progress"
                                        cx="60"
                                        cy="60"
                                        r="50"
                                        style="
                                            stroke:@GetSingleColor(selectedPassword.PasswordScore);
                                            stroke-dashoffset:@GetDashOffset(selectedPassword.PasswordScore);
                                        " />
                            </g>
                            <!-- Score text in center -->
                            <text x="50%" y="50%"
                                  class="donut-score"
                                  dominant-baseline="middle"
                                  text-anchor="middle">
                                @selectedPassword.PasswordScore%
                            </text>
                        </svg>
                    </div>

                    <!-- Strength Label & Advice -->
                    <div class="mt-3">
                        <p class="fs-4 text-white mb-1">
                            <strong>@GetStrengthLabel(selectedPassword.PasswordScore)</strong>
                        </p>
                        <small class="text-muted fs-5">
                            @GetAdviceText(selectedPassword.PasswordScore)
                        </small>
                    </div>
                </div>
            </div> <!-- END BODY -->
        </div>

        <!-- BOTTOM SECTION - Extra content -->
    <!-- BOTTOM SECTION - Extra content about the selected password -->
<div class="extra-content shadow-lg p-4 mt-4">
    <h4 class="text-white mb-5 text-center">Additional Information</h4>

    <!-- Show more detailed info about the selected password -->
    <div class="row g-3">
        <!-- Example: “Last Updated,” “Used On Devices,” “Potential Vulnerabilities” -->
        <div class="col-sm-6 col-xl-4">
            <div class="stats-box p-3 text-center">
                <i class="bi bi-clock-history display-6 text-warning mb-2"></i>
                <h5 class="text-white fw-bold">Last Updated</h5>
                    @if (passwordChanges != null && passwordChanges.Any())
                    {
                        <p class="text-muted">@passwordChanges.OrderByDescending(change => change.ChangedAt).FirstOrDefault()?.ChangedAt.ToLocalTime().ToString("MMM dd, yyyy HH:mm", System.Globalization.CultureInfo.InvariantCulture)
                        </p>
                        } else {
                        <span class="text-muted">No changes yet</span>
                    }
            </div>
        </div>
        
        <div class="col-sm-6 col-xl-4">
            <div class="stats-box p-3 text-center">
                <i class="bi bi-laptop display-6 text-info mb-2"></i>
                <h5 class="text-white fw-bold">Used On Devices</h5>
                <p class="text-muted">
                    2 devices
                </p>
            </div>
        </div>
        
        <div class="col-sm-6 col-xl-4">
            <div class="stats-box p-3 text-center">
                <i class="bi bi-shield-exclamation display-6 text-danger mb-2"></i>
                <h5 class="text-white fw-bold">Potential Issues</h5>
                <p class="text-muted">
                    <!-- Example text or dynamic checks, e.g. data breach checks -->
                    @(
                        selectedPassword.PasswordScore < 50
                        ? "This password may have appeared in a data breach!"
                        : "No known compromises."
                    )
                </p>
            </div>
        </div>
    </div>

    <hr class="text-secondary my-4" />

    <!-- A tips box or any other details -->
    <div class="row g-3">
        <div class="col-md-12">
            <div class="tips-box p-3 text-center">
                <h4 class="text-white">Quick Tip</h4>
                <p class="text-muted">
                    Not sure how to make strong password? Use our <a href="" class="text-decoration-none">Password Generator</a> 
                    to generate a secure password.
                </p>
            </div>
        </div>
    </div>
</div>

                    
    }
    else
    {
        <div class="alert alert-info text-center">
            <i class="bi bi-info-circle me-2"></i>
            Please select a password from the list on the left.
        </div>
    }
</div>






   



          

        </div>
        
        
    </div>

</div>


<style>

    /* Light mode styles for the alphabet list */
.light-mode .alphabet-list h5 {
    color: linear-gradient(45deg, #0d6efd, #6610f2);
}

.light-mode .alphabet-list a {
    background-color: #ffffff;
    color: #333333 !important;
    border: 1px solid #dee2e6;
    transition: all 0.2s ease;
}

.light-mode .alphabet-list a:hover {
    background-color: #f8f9fa;
    border-color: #ced4da;
    transform: translateX(5px);
}

.light-mode .alphabet-list a.active {
    background-color: #fafafa;
    border-color: #ced4da;
    color: #000000 !important;
}

/* Small text in the password list */
.light-mode .alphabet-list .small {
    color: #6c757d !important;
}

/* Badge in the password list */
.light-mode .alphabet-list .badge {
    background-color: #e9ecef;

}

    /* Light Mode Styles - Updated for better look */
    .light-mode {
        background-color: #f8f9fa;
        color: #2c3e50;
    }

    .light-mode .sidebar-nav {
        background-color: #ffffff;
        border-right: 1px solid #e9ecef;
        box-shadow: 2px 0 10px rgba(0,0,0,0.05);
    }

    .light-mode .nav-link {
        background-color: #f8f9fa !important;
        color: #2c3e50 !important;
        border: 1px solid #e9ecef;
        transition: all 0.2s ease;
    }

    .light-mode .nav-link:hover {
        background-color: #e9ecef !important;
        border-color: #dee2e6;
        transform: translateX(5px);
    }

    .light-mode .glass-card {
        background: #ffffff;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-radius: 10px;
    }

    .light-mode .top-navbar {
        background-color: #ffffff !important;
        border-bottom: 1px solid #e9ecef;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .light-mode .profile-card {
        background-color: #ffffff !important;
        color: #2c3e50 !important;
        border: none;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        border-radius: 12px;
    }

    .light-mode .stat-card {
        background: #ffffff;
        border: none;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        border-radius: 10px;
    }

    .light-mode .dashboard-main {
        background: #f8f9fa;
    }

    .light-mode .col-3 {
        background-color:  	#d2d3db;
        box-shadow: 2px 0 10px rgba(0,0,0,0.05);
        border-right: 1px solid #e9ecef;
    }

    .light-mode .text-white {
        color: #2c3e50 !important;
    }

    .light-mode .info-box {
        background-color: #ffffff;
        border: none;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
    }

    .light-mode .info-box h5 {
        color: #2c3e50;
        font-weight: 600;
    }

    .light-mode .info-box p {
        color: #6c757d;
    }

    .light-mode .password-details-container {
        background-color: #ffffff !important;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-radius: 12px;
    }

    .light-mode .password-details-header {
        background: linear-gradient(135deg, #ffffff, #f8f9fa);
        border-bottom: 1px solid #e9ecef;
    }

    .light-mode .password-details-body {
        background: #ffffff;
        padding: 20px;
    }

    .light-mode .extra-content {
        background: #ffffff;
        border: none;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-radius: 12px;
    }

    .light-mode .stats-box {
        background-color: #f8f9fa;
        border: none;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        border-radius: 10px;
        transition: transform 0.2s ease;
    }

    .light-mode .stats-box:hover {
        transform: translateY(-5px);
    }

    .light-mode .list-unstyled li a {
        color: #2c3e50;
        transition: all 0.2s ease;
    }

    .light-mode .list-unstyled li a:hover {
        background-color: #e9ecef;
        color: #0056b3;
        transform: translateX(5px);
    }

.dark-mode  .text-white{
  color: white !important;
}

.dark-mode .glass-card {
    background: #2B2B3D;
}

.dark-mode .sidebar-nav {
    background-color: #1E1E2F !important;
    
}

.dark-mode .sidebar-nav {
  background-color: #1E1E2F !important;
}

.dark-mode .nav-link {
  background-color: #2B2B3D !important;
  color: #fff !important;
}
.dark-mode .sidebar-nav {
  background-color: #1E1E2F !important;
  border-right: 1px solid #444 !important;
}

.dark-mode .nav-link {
  border: 1px solid #444;
  background-color: #2B2B3D !important; 
  color: #fff !important;
  margin: 0.2rem 0; /* optional for spacing */
}

.dark-mode .nav-link:hover {
  background-color: #36364E !important;
  border-color: #555;
}

.dark-mode .stat-card
{
    background: rgb(186, 186, 196);
    border: 1px solid #444;
    
}

.dark-mode .b2 {
  border-bottom: 1px solid #444;
}


.dark-mode .dashboard-main
{
  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
}

.dark-mode .profile-card {
    background-color: #2B2B3D !important;
    color: #fff !important;
    border: 1px solid #444;
}

.dark-mode .top-navbar {
  background-color: #1E1E2F !important;
  color: #fff !important;
  border-bottom-color: 1px solid #444;
}


.dark-mode .security-status {
  background-color: #1E1E2F !important;
}

.logout-link {
  color: #ff4c4c !important;
}

.dark-mode .logout-link {
  color: #ff4c4c !important;
}
.logout-link:hover {
  color: #fa1a1a !important;
}

.container-fluid {
  margin: 0;
  padding: 0;
  height: 100vh;
  overflow: hidden;
}

.sidebar-nav {
  padding: 0 !important;
}
.dashboard-main {
    height: 100vh;
    overflow-y: auto; /* Allow scrolling in main content */
    padding: 2rem;
    margin-bottom: 0; /* Remove bottom margin */
}

.top-navbar {
    height: auto; /* Let content determine height */
    min-height: unset; /* Remove min-height if set */
}

.min-vh-100 {
    min-height: unset !important; /* Remove minimum viewport height */
}

.donut-gauge-container {
    display: inline-block;
    margin: 1rem 0;
    text-align: center;
}

.donut-gauge {
    width: 200px;    /* Adjust to your preference */
    height: 200px;
}

/* The base circle (track) */
.donut-track {
    fill: none;
    stroke: #2f2f3e;        /* Dark gray track color */
    stroke-width: 15;       /* Thickness of the donut ring */
}

/* The progress circle */
.donut-progress {
    fill: none;
    /* We set the stroke in the HTML as stroke="url(#multiColorGradient)" */
    stroke-width: 15;
    stroke-linecap: round;  /* Rounded ends on the ring */
    stroke-dasharray: 314;  /* Must match circle circumference if r=50 */
    stroke-dashoffset: 314; /* Start at zero progress (fully hidden) */
    transition: stroke-dashoffset 1s ease-out;
}

/* Center text for the numeric score */
.dark-mode .donut-score {
    fill: #ffffff;    /* White text color */
    font-size: 22px;
    font-weight: 700;
}

/* Center text for the numeric score */
.light-mode .donut-score {
    fill: #000000;    /* White text color */
    font-size: 22px;
    font-weight: 700;
}

/* Label below the score (e.g. "Weak", "Moderate", "Strong") */
.donut-label {
    fill: #ffc107;    /* Golden text color or adjust as needed */
    font-size: 12px;
    font-weight: 400;
}


.full-height-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* The container for the top password details */
.dark-mode .password-details-container {
    background-color: #1A1B2D; /* or any dark background color */
    border-radius: 10px;
    overflow: hidden;
}

/* CHANGE THIS */
.dark-mode .password-details-header {
    background: linear-gradient(135deg, #25274D, #1A1B2D);
    border-bottom: 1px solid #333;
}

/* AND THIS */
.dark-mode .password-details-body {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
}


/* Common "info-box" style */
.dark-mode .info-box {
    background-color: #232446;
    border-radius: 6px;
    padding: 12px;
    margin-bottom: 6px;
    transition: background-color 0.3s ease;
}
.dark-mode .info-box:hover {
    background-color: #2F305E;
}

/* Extra content box */
.dark-mode .extra-content {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    border-radius: 10px;
}
.dark-mode .stats-box {
    background-color: #232446;
    border-radius: 6px;
    transition: background-color 0.3s ease;
}
.dark-mode .stats-box:hover {
    background-color: #2F305E;
}


.info-box h5 {
    color: #83aba4;
    margin-bottom: 4px;
}
.info-box p {
    color: #ffffff;
    margin: 0;
    font-size: 1rem;
}
/* Category badge style */
.category-badge {
    background-color: #17a2b8;
    color: #fff;
    font-size: 0.875rem;
    border-radius: 5px;
    padding: 3px 8px;
}



/* Adjust your buttons if needed */
.btn-primary {
    background-color: #4c62dc;
    border: none;
}
.btn-primary:hover {
    background-color: #3e52b3;
}

.btn-danger {
    background-color: #d9534f;
    border: none;
}
.btn-danger:hover {
    background-color: #c9302c;
}

.btn-info {
    background-color: #5bc0de;
    border: none;
}
.btn-info:hover {
    background-color: #46b8da;
}

/* For the password logo image */
.password-logo {
    width: 60px;
    height: 60px;
    object-fit: cover;
}


.toast {
    opacity: 1 !important;
    display: block !important;
}


.bg-warning-subtle {
    background-color: rgba(181, 188, 199, 0.2) !important; /* jemná žlutá */
}


.password-strength-gauge {
    display: flex;
    flex-direction: column;
    align-items: center; /* Zarovnání do středu */
    justify-content: center;
    margin: 20px auto;
}





.password-details-card {
    transition: box-shadow 0.3s ease;
}





.password-details-header {
    padding: 15px;
    font-size: 1.25rem;
}


.password-details-body p {
    margin-bottom: 10px;
}

.password-details-footer {
    border-top: 1px solid #34344A;
    padding: 15px;
}

.password-details-footer .btn {
    border-radius: 5px;
    font-size: 0.9rem;
}

    /* Barevné ikony */
.nav-link i {
    color: #9A9AB0; /* Výchozí barva ikon */
    transition: color 0.3s; /* Hladký přechod při hoveru */
}

.nav-link:hover i, .nav-link.active i {
    color: #FFFFFF; /* Bílá při aktivaci nebo hoveru */
}

.toast {
    transition: transform 0.3s ease, opacity 0.3s ease;
}
.toast-header {
    font-size: 1rem;
    font-family: 'Ubuntu', sans-serif;
}
.toast-body {
    font-family: 'Ubuntu', sans-serif;
    color: #333;
}





    .modal-content input,
    .modal-content textarea,
    .modal-content select {
        color: #000000 !important; /* Černý text */
        border: 1px solid #ced4da; /* Světlý rámeček */
        border-radius: 4px; /* Zaoblené hrany */
        padding: 0.5rem;
    }

    /* Placeholder ve vstupech */
    .modal-content input::placeholder,
    .modal-content textarea::placeholder {
        color: #6c757d; /* Tmavě šedý placeholder */
        opacity: 1;
    }

    /* Styl při focusu */
    .modal-content input:focus,
    .modal-content textarea:focus,
    .modal-content select:focus {
        border-color: #80bdff; /* Modrý rámeček při zaměření */
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Jemný modrý stín */
    }

    /* Styl tlačítek */
    .modal-content .btn-primary {
        background-color: #1A73E8 !important;
        border-color: #1A73E8 !important;

    }



    /* Odkazy v sidebaru */
    .nav-link {
        color: #9A9AB0;
    }

    .nav-link:hover, .nav-link.active {
        background-color: #2B2B3D;
        color: #FFFFFF;
        border-radius: 4px;
    }

    /* Kategorie - hover efekty */
    .list-unstyled a {
        color: #ffffff;
    }

    .dark-mode .list-unstyled a:hover, .list-unstyled a.active {
        background-color: #2B2B3D;
        color: #FFFFFF;
        border-radius: 4px;
    }

    /* Tlačítko */
    .btn-primary {
        background-color: #1A73E8;
        border-color: #1A73E8;
        color: #FFFFFF;
    }

    .btn-primary:hover {
        background-color: #0056B3;
        border-color: #0056B3;
        color: #FFFFFF;
    }




    /* Odkazy v kartě */
    .card a {
        color: #007BFF;
    }

    .card a:hover {
        color: #009EFF;
        text-decoration: underline;
    }

    /* Oddělovací čáry */
    .border-end, .border-bottom {
        border-color: #34344A !important;
    }

    /* Text tlumený */
    .text-muted {
        color: #9A9AB0 !important;
    }

.light-mode .col-3 {
    background-color: #f8f9fa;
}

.light-mode .list-unstyled li a:hover {
    background-color: #f1f1f1;
    transition: background-color 0.3s ease;
}

/* Dark mode */
.dark-mode .col-3 {
    background-color: #1E1E2F !important; /* Darker background */
}

/* Optional: Add hover effect for better UX */
.dark-mode .col-3 .list-unstyled li a:hover {
    background-color: #8585ad;
    transition: background-color 0.3s ease;
}

    .dropdown-menu {
    border-radius: 10px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(8px);
    }

    .dropdown-item {
        padding: 10px 15px;
        transition: background-color 0.2s, color 0.2s;
    }

    .dropdown-item:hover {
        background-color: #6c757d; /* Nebo jiná barva */
        color: white;
    }




</style>




@code {
    private PasswordDetails? userPassword { get; set; } = new PasswordDetails();
    private AccountDetails user {get; set; } = new AccountDetails();
    private PasswordChanges passwordsDetails { get; set; } = new PasswordChanges();
    private List<PasswordDetails> passwords { get; set; } = new List<PasswordDetails>();
    public List<string> Categories = new List<string> { "Social Media", "Email", "Banking", "Shopping", "Work", "Other" };
    private Dictionary<int, bool> passwordVisibility = new Dictionary<int, bool>(); // Map for searching passwords visibility. KEY-VALUE(Key=id), (Value=bool(is visible/not visible))
    private int passwordLength;
    private string? generatedPassword;
    private bool IsCopied = false;
    private double MaxPasswordDays = 30;
    [Inject]
    public IClipboard? Clipboard { get; set; }
    private bool isPasswordVisible = false; // Stav viditelnosti hesla
    private string passwordType = "password"; // Typ inputu (password/text)
    private string backUpCode = "password";
    private PasswordDetails? selectedPassword;
    private int notifications = 3;
    private string? uploadedImagePreview;
    private bool isBackupCodeVisible  = false;
    private bool isEditMode = false;
    private int changes = 0;
    private List<PasswordChanges> passwordChanges;
    private IEnumerable<IGrouping<char, PasswordDetails>> groupedPasswords;
    private double circumference = 314;
    private string decryptedPassword;
    private string encryptionKeyBase64;
    private bool isDarkMode = false;

    private List<PasswordDetails> weakPasswords = new List<PasswordDetails>();
    private List<PasswordDetails> outDatedPasswords = new List<PasswordDetails>();

    
    private void ToggleTheme()
    {
        isDarkMode = !isDarkMode;
    }

    private string GetDashOffset(int score)
    {
        // At 0% => offset ~314 (no fill).
        // At 100% => offset = 0 (fully filled).
        double offset = circumference - (score / 100.0 * circumference);
        return offset.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
    }
    private string GetStrengthLabel(int score)
    {
        if (score < 30)
            return "Weak";
        else if (score < 70)
            return "Moderate";
        else
            return "Strong";
    }

    private string GetAdviceText(int score)
    {
        // Basic example messages
        if (score < 30)
        {
            return "Your password is too weak. Include upper/lowercase letters, numbers, and symbols.";
        }
        else if (score < 70)
        {
            return "Your password is decent, but could be stronger with a mix of characters.";
        }
        else
        {
            return "Great job! Your password is strong. Keep it updated regularly.";
        }
    }


    private string GetSingleColor(int score)
    {
        // Red for weak, yellow for moderate, green for strong
        if (score < 30) return "#dc3545";  // Red
        else if (score < 60) return "#ffc107"; // Yellow
        else return "#28a745";            // Green
    }


    private async Task DeleteLog(int logId)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        try
        {
            var response = await httpClient.DeleteAsync($"api/PasswordDetails/DeleteLog/{logId}");
            if (response.IsSuccessStatusCode)
            {
                // TO DO
            }
            else
            {
                // TO DO
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error while trying to delete password");
        }
    }

    private async Task DeleteAllLogs(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        try
        {
            var response = await httpClient.DeleteAsync($"api/PasswordDetails/DeleteAllLogs");
            if (response.IsSuccessStatusCode)
            {
                // TO DO
            }
            else
            {
                // TO DO
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error while trying to delete password");
        }
    }

    private async Task LoadHistory(int passwordId)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        try
        {
            passwordChanges = await httpClient.GetFromJsonAsync<List<PasswordChanges>>($"api/PasswordDetails/{passwordId}/history");
        } catch (Exception ex) {
            Console.WriteLine($"Error loading password history: {ex.Message}");
        }
    }



    private void OnEditClick()
    {
        isEditMode = true;
        userPassword = selectedPassword; // Případně si můžeš udělat volání API, pokud to chceš načítat detailně
        changes++;
        // Nic víc není třeba, protože samotný modal se otevře přes data-bs-* a nepotřebuje volání JSRuntime
    }



    private void CloseModal()
    {
        isEditMode = false; // Resetujeme režim modalu
        userPassword = new PasswordDetails(); // Resetujeme formulář
        uploadedImagePreview = null; // Vyčistíme obrázek
    }
   private void TogglePasswordVisibility()
    {
        // Když chci heslo zobrazit:
        if (!isPasswordVisible)
        {
            // Ověřit, jestli existuje IV
            if (string.IsNullOrEmpty(selectedPassword?.initVector))
            {         
                return;
            }

            byte[] encryptionKey = Convert.FromBase64String(encryptionKeyBase64);


            byte[] encryptedPassword = Convert.FromBase64String(selectedPassword.Password);
            byte[] iv = Convert.FromBase64String(selectedPassword.initVector);

            decryptedPassword = CryptoService.Decrypt(encryptedPassword, encryptionKey, iv);
        }
        
        // Přepneme stav
        isPasswordVisible = !isPasswordVisible;
    }



    private void ToggleBackupCodesVisibility()
    {
        isBackupCodeVisible = !isBackupCodeVisible;
        backUpCode = isBackupCodeVisible ? "text" : "password";

    }

        private async Task HandleImageUpload(InputFileChangeEventArgs e)
        {
            var uploadedFile = e.File;
            if (uploadedFile != null)
            {
                if (uploadedFile.Size > 10 * 1024 * 1024) // 1MB max
                {
                    Console.WriteLine("File is too large.");
                    await Swal.FireAsync("Error", "File size exceeds 1MB.", "error");
                    return;
                }

                var allowedTypes = new[] { "image/jpeg", "image/png", "image/jpg" };
                if (!allowedTypes.Contains(uploadedFile.ContentType))
                {
                    Console.WriteLine("Invalid file type.");
                    await Swal.FireAsync("Error", "Only JPEG and PNG images are allowed.", "error");
                    return;
                }

                var buffer = new byte[uploadedFile.Size];
                await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);

                userPassword.ImagePath = buffer;
                uploadedImagePreview = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            }
        }

    private async Task LoadPasswords()
{
    var httpClient = HttpClientFactory.CreateClient("ApiClient");
    var fetchedPasswords = await httpClient.GetFromJsonAsync<List<PasswordDetails>>($"api/PasswordDetails/{user.Id}");

    // 1) Sort by name
    var sorted = fetchedPasswords.OrderBy(p => p.Name, StringComparer.OrdinalIgnoreCase);

    // 2) Group by first letter (uppercase). Handling empty or null names if needed.
    groupedPasswords = sorted
        .Where(p => !string.IsNullOrEmpty(p.Name))  // ensure no null
        .GroupBy(p => char.ToUpper(p.Name[0]));

    passwords = sorted.ToList(); // Keep the sorted list if you still need 'passwords'
    
    // ... any other logic, e.g. select the first password by default ...
    if (passwords.Any())
    {
        selectedPassword = passwords.First();
        await LoadHistory(selectedPassword.Id);
    }
}



    private async Task SelectPassword(PasswordDetails password)
    {
        selectedPassword = password;
        await LoadHistory(password.Id);
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            var isAuthenticated = currentUser.Identity.IsAuthenticated;
            Console.WriteLine($"Is user authenticated: {isAuthenticated}");


            isAuthenticated = currentUser.Identity.IsAuthenticated;

            if (isAuthenticated)
            {
                var userIdClaim = currentUser.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userIdClaim))
                {
                    var httpClient = HttpClientFactory.CreateClient("ApiClient");
                    var url = $"api/UserDetails/{userIdClaim}";
                    Console.WriteLine($"Requesting URL: {url}");

                    var result = await httpClient.GetFromJsonAsync<AccountDetails>(url);

                    if (result != null)
                    {
                        user = result;
                        Console.WriteLine("User data loaded successfully.");
                    }
                    else
                    {
                        Console.WriteLine("User not found or API returned null.");
                    }
                }
                else
                {
                    Console.WriteLine("UserId claim is missing.");
                }

            }
            else
            {
                Console.WriteLine("User is not authenticated.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HttpRequestException: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
        encryptionKeyBase64 = Configuration["Encryption:Key"];
        await LoadPasswords();
        await PasswordOldChecker();
        await PasswordScoreCalculator();
        
    }


    private async Task LoadPasswordDetails(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.GetAsync($"api/PasswordDetails/{id}");

        

        if (response.IsSuccessStatusCode)
        {
            userPassword = await response.Content.ReadFromJsonAsync<PasswordDetails>();
        }
        else
        {
            // Zalogování chyby

        }
    }

    private string ShowDecryptedPassword()
    {
        // varianta #1: přímo do kódu
        byte[] encryptionKey = Convert.FromBase64String(encryptionKeyBase64);

        byte[] encryptedBytes = Convert.FromBase64String(userPassword.Password);
        byte[] ivBytes = Convert.FromBase64String(userPassword.initVector);

        return CryptoService.Decrypt(encryptedBytes, encryptionKey, ivBytes);
    }


    private async Task CreatePassword()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            if (isEditMode)
            {
                // Aktualizace hesla
                var response = await httpClient.PutAsJsonAsync($"api/PasswordDetails/{userPassword.Id}", userPassword);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error updating password: {response.StatusCode}");
                }
            }
            else
            {
                byte[] encryptionKey = Convert.FromBase64String(encryptionKeyBase64);
                
                using Aes aes = Aes.Create();
                aes.GenerateIV();

                byte[] iv = aes.IV;
                byte[] encryptedPassword = CryptoService.Encrypt(userPassword.Password, encryptionKey, iv);

                // Přidání nového hesla
                userPassword.AccountDetailsId = user.Id;
                userPassword.Password = Convert.ToBase64String(encryptedPassword);
                userPassword.initVector = Convert.ToBase64String(iv);
                

                var response = await httpClient.PostAsJsonAsync($"api/PasswordDetails/", userPassword);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error creating password: {response.StatusCode}");
                }
            }

            await LoadPasswords(); // Načteme aktualizovaná hesla
            CloseModal(); // Zavřeme modal
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }




    private async Task DeletePassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.DeleteAsync($"api/PasswordDetails/{id}");

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }

    private async Task EditPassword(int id)
    {
        userPassword.AccountDetailsId = user.Id;

        // 1) Pokud uživatel zadal nové heslo (plaintext) do nějaké proměnné (např. 'plainPassword'),
        //    je potřeba ho tady zašifrovat:
        string plaintext = userPassword.Password; // Sem si zkopírujete, co uživatel opravdu napsal
        byte[] encryptionKey = Convert.FromBase64String(encryptionKeyBase64);

        using Aes aes = Aes.Create();
        aes.GenerateIV();
        byte[] iv = aes.IV;

        byte[] encryptedPassword = CryptoService.Encrypt(plaintext, encryptionKey, iv);

        userPassword.Password = Convert.ToBase64String(encryptedPassword);
        userPassword.initVector = Convert.ToBase64String(iv);

        // 2) Následně odešlete do API
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsync(
            $"api/PasswordDetails/{id}",
            new StringContent(JsonSerializer.Serialize(userPassword), Encoding.UTF8, "application/json")
        );

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {
            // ošetření chyby
        }
    }


    private void GeneratePassword()
    {
        generatedPassword = PasswordGenerator(passwordLength);    
    }

    private string PasswordGenerator(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; // Valid characters for password

        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task CopyTextToClipboard()
    {
        // Copy text to clipboard
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
        IsCopied = true;
        await Task.Delay(4000);
        IsCopied = false;
    }


    private async Task PasswordOldChecker()
    {
        foreach (var password in passwords)
        {
            if (password.CreatedAt.AddDays(MaxPasswordDays) <= DateTime.Now)
            {
                password.IsPasswordOld = true;
            }
        }
        
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsJsonAsync("api/PasswordDetails/UpdateOldPasswords", passwords); 

        if(response.IsSuccessStatusCode)
        {
            await LoadPasswords();
        }
        
    }

    private async Task PasswordScoreCalculator()
    {
        foreach (var password in passwords)
        {
            var passwordId = password.Id; 
            
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PutAsJsonAsync($"api/PasswordDetails/{passwordId}/calculate-score", password);
        
            if (response.IsSuccessStatusCode)
            {
                await LoadPasswords();
            }
        }
    }

    /*private void DownloadFile(int userId)
    {
        var downloadUrl = $"http://localhost:5237/api/PasswordDetails/Export/{userId}";
        NavigationManager.NavigateTo(downloadUrl, true);
    }*/

    private bool isLoading = false;

    private async Task SetPasswordAsFavorite(int passwordId)
    {
        isLoading = true;
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        try
        {
            var response = await httpClient.PutAsync($"api/PasswordDetails/SetFavorite/{passwordId}", null);
            if (response.IsSuccessStatusCode)
            {
                var password = passwords.FirstOrDefault(p => p.Id == passwordId);
                if (password != null)
                {
                    password.IsFavorite = !password.IsFavorite;
                }

                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Failed to update favorite status.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error while setting favorite: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

}


