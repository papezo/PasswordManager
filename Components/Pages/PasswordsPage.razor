@page "/PasswordsPage"

@rendermode InteractiveServer

@using System.Text
@using System.Text.Json
@using WebApp.Models
@using System.Net.Http
@using System.Net.Http.Json

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager


<PageTitle>Passwords</PageTitle>

<div class="container-fluid d-flex p-0">
    <nav class="d-flex justify-content-start align-items-center navbar bg-dark flex-column vh-100 border-end">
        <a class="navbar-brand p-2 text-white ms-2" href="#">Management</a>
        <ul class="navbar-nav flex-column mb-2">
            <li class="nav-item p-2 mt-3 ">                
                <i class="bi bi-speedometer2 text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link active text-white ms-4" aria-current="page" href="#">Dashboard</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2">
                <i class="bi bi-lock text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="PasswordsPage">Passwords</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2">
                <i class="bi bi-book text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="#">Security Tips</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2">
                <i class="bi bi-patch-check text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="#">Validator</a>
                </i>
            </li>
            <p class="navbar-brand p-2 text-white mt-5 ms-3">Settings</p>
            <li class="nav-item p-2 mt-2">
                <i class="bi bi-person-circle text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="#">Account</a>
                </i>
            </li>
            <li class="nav-item p-2 mt-2">
                <i class="bi bi-chat-right text-white d-flex justify-content-start align-items-center">
                    <a class="nav-link text-white ms-4" href="#">Support</a>
                </i>
            </li>
        </ul>
    </nav>

    <main class="w-100">
        <div class="d-flex flex-column align-items-center p-3 bg-dark text-white vh-100">
            <div class="container">
                <h4 class="mb-4">Add a new password</h4>
                <EditForm Model="@userPassword" OnValidSubmit="CreatePassword" FormName="CreatePassword">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="username" class="form-label">Service Name</label>
                        <InputText id="username" class="form-control" @bind-Value="userPassword.Name" placeholder="Service Name" />
                        <ValidationMessage For="@(() => userPassword.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="userPassword.Email" placeholder="Email" />
                        <ValidationMessage For="@(() => userPassword.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" class="form-control" @bind-Value="userPassword.Password" placeholder="Password" type="password" />
                        <ValidationMessage For="@(() => userPassword.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="category" class="form-label">Category</label>
                        <div class="d-flex flex-column">
                            <InputSelect id="category" @bind-Value="userPassword.Category" class="form-select">
                                <option disabled selected>Select a category</option>
                                @foreach(var category in Categories) 
                                {
                                    <option value="@category">@category</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputText id="description" class="form-control" @bind-Value="userPassword.Description" placeholder="Description" />
                        <ValidationMessage For="@(() => userPassword.Description)" />
                    </div>

                    <button type="submit" class="btn btn-primary mt-3">Add Password</button>
                </EditForm>
            </div>

            <div class="container mt-5">
                <h4 class="mb-4">Saved Passwords</h4>
                <p>All of your passwords are up to date and secured.</p>
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>Service Name</th>
                            <th>Email</th>
                            <th>Password</th>
                            <th>Category</th>
                            <th>Description</th>
                            <th>Added At</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var password in passwords)
                        {
                            <tr>
                                <td>@password.Name</td>
                                <td>@password.Email</td>
                                <td class="align-middle">
                                    <span style="display: inline-flex; align-items: center;">
                                        @HidePassword(password.Password)
                                        <i class="bi bi-eye-fill ms-3" style="cursor: pointer;"></i>
                                    </span>
                                </td>

                                <td>@password.Category</td>
                                <td>@password.Description</td>
                                <td>@password.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <button class="btn btn-warning btn-sm me-2" @onclick="() => EditPassword(password.Id)">Edit</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeletePassword(password.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </main>
</div>

@code {
    private PasswordDetails userPassword { get; set; } = new PasswordDetails();
    private List<PasswordDetails> passwords { get; set; } = new List<PasswordDetails>();
    public List<string> Categories = new List<string> { "Social Media", "Email", "Banking", "Shopping", "Work", "Other" };
    

    protected override async Task OnInitializedAsync()
    {
        await LoadPasswords();
    }

    private async Task LoadPasswords()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        passwords = await httpClient.GetFromJsonAsync<List<PasswordDetails>>("api/PasswordDetails");
    }

    private async Task CreatePassword()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PostAsJsonAsync("api/PasswordDetails", userPassword);

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
            userPassword = new PasswordDetails(); 
        }
        else
        {
            // Handle error
        }
    }

    private async Task DeletePassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.DeleteAsync($"api/PasswordDetails/{id}");

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }

    private async Task EditPassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsync($"api/PasswordDetails/{id}", new StringContent(JsonSerializer.Serialize(userPassword), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }
    private string HidePassword(string password)
    {
    var hiddenPassword = new StringBuilder();
    for (int i = 0; i < password.Length; i++)
    {
        hiddenPassword.Append("*");
    }
    return hiddenPassword.ToString();
    }
}
