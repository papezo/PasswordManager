@page "/PasswordsPage"

@rendermode InteractiveServer


@using System.Text
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using WebApp.Dto
@using WebApp.Models
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json


@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal





<PageTitle>Passwords</PageTitle>

<div class="container-fluid d-flex p-0 vh-100">
    <!-- Sidebar -->
    <nav class="bg-dark text-light border-end d-flex flex-column p-3" style="width: 300px;">
        <div class="d-flex align-items-center mb-4 justify-content-center">
            <img src="images/security.png" alt="Security" width="50" class="me-2 ">
        </div>
        <div class="text-center">
            <p class="fs-4 fw-bold">Bertly</p>
            <p style="font-style: italic; font-size: 1.1rem; color: #9a9ab0; letter-spacing: 0.5px;">
                Guarding your secrets, so you can sleep soundly
            </p>
        </div>

        <h6 class="text-uppercase text-secondary fs-5 mt-2">Management</h6>
        <ul class="nav flex-column">
            <li class="nav-item mt-2">
                <a class="nav-link text-light d-flex align-items-center fs-5" href="/HomeManager">
                    <i class="bi bi-speedometer2 me-3"></i> Dashboard
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-light d-flex align-items-center fs-5" href="/PasswordsPage">
                    <i class="bi bi-lock me-3"></i> Passwords
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-light d-flex align-items-center fs-5" href="/SecurityTips">
                    <i class="bi bi-book me-3"></i> Security Tips
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-light d-flex align-items-center fs-5" href="/Validator">
                    <i class="bi bi-patch-check me-3"></i> Validator
                </a>
            </li>
        </ul>

        <hr>

        <h6 class="text-uppercase text-secondary fs-5">Categories</h6>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link text-light d-flex justify-content-between align-items-center fs-5" data-bs-toggle="collapse" href="#category1">
                    <span><i class="bi bi-folder me-3"></i> Social Media</span>
                    <i class="bi bi-chevron-down"></i>
                </a>
                <div class="collapse ps-3" id="category1">
                    <a href="#" class="nav-link text-light">Facebook</a>
                    <a href="#" class="nav-link text-light">Instagram</a>
                    <a href="#" class="nav-link text-light">Trading212</a>
                </div>
            </li>
        </ul>

        <hr>

        <h6 class="text-uppercase text-secondary fs-5">Settings</h6>
        <ul class="nav flex-column">
            <li class="nav-item">
                <a class="nav-link text-light fs-5" href="/Account">
                    <i class="bi bi-person-circle me-3"></i> Account
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-light fs-5" href="/Support">
                    <i class="bi bi-chat-right me-3"></i> Support
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-light fs-5" href="/Documentation">
                    <i class="bi bi-folder2-open me-3"></i> Documentation
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-light fs-5" href="/RecentlyDeleted">
                    <i class="bi bi-trash me-3"></i> Recently Deleted
                </a>
            </li>
        </ul>


        <div class="d-flex align-items-center mt-auto">

            <i class="bi bi-moon-stars text-light me-3"></i>
            <span class="text-light fs-5">Dark Mode</span>
            <div class="form-check form-switch ms-auto">
                <input class="form-check-input" type="checkbox" id="darkModeSwitch" checked>
            </div>
        </div>

        <div class="user-info mt-3 border-top pt-3 text-center">
            <img src="images/user.png" alt="User Avatar" class="rounded-circle mb-2" width="50">
            <p class="text-light mb-0 fw-bold">Ondřej Papež</p>
            <small class="text-muted">Admin</small>
        </div>
        
        <div class="mt-3">
            <a href="/logout" class="nav-link text-danger fs-5">
                <i class="bi bi-box-arrow-left me-3"></i> Log Out
            </a>
        </div>

    </nav>

    <!-- Main Content -->
    <div class="d-flex flex-column flex-grow-1 vh-100">
        <!-- Header -->
        <div class="bg-white p-3 border-bottom d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="bi bi-arrow-left-short text-white fs-2"></i>
            <i class="bi bi-arrow-right-short text-white fs-2"></i>
            <div class="input-group ms-5 bg-light rounded-5" style="width: 500px;">
                <span class="input-group-text border-0"><i class="bi bi-search fs-5 text-muted"></i></span>
                <input type="text" class="form-control border-0 shadow-none text-white" placeholder="Search Password">
            </div>
        </div>
        <div class="d-flex align-items-center">
            <!-- Notifikace -->
            <div class="dropdown me-3">
                <button class="btn btn-outline-light btn-sm rounded-circle icon-btn position-relative"
                        type="button" id="notificationsDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-bell fs-5"></i>
                    <span class="position-absolute top-0 start-100 translate-middle badge border border-light rounded-pill bg-danger text-white fw-bold"
                        style="width: 28px; height: 28px; font-size: 0.75rem; display: flex; align-items: center; justify-content: center;">
                        @notifications
                    </span>
                </button>
                <ul class="dropdown-menu dropdown-menu-end shadow-lg" aria-labelledby="notificationsDropdown">
                    <li><h6 class="dropdown-header">Notifications</h6></li>
                    <li><a class="dropdown-item text-danger" href="#"><i class="bi bi-exclamation-triangle me-2"></i> Weak password detected</a></li>
                    <li><hr class="dropdown-divider"></li>
                    <li><a class="dropdown-item text-muted" href="#">View all</a></li>
                </ul>
            </div>
            <!-- Volba jazyka -->
            <!-- Otázka -->
            <button class="btn btn-outline-light btn-sm rounded-circle icon-btn position-relative"
                    type="button">
                <i class="bi bi-question-circle fs-5"></i>
            </button>
        </div>
    </div>

<!-- Modal for History of Changes -->
        <div class="modal fade" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content bg-dark text-white border-0 rounded-4 shadow">
                    <div class="modal-header border-bottom border-info">
                        <h5 class="modal-title fw-bold" id="historyModalLabel">History of Changes</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="list-group">
                            <div class="list-group-item bg-warning-subtle mb-2 rounded-3">
                                <div class="d-flex text-white justify-content-between">
                                    <span>
                                        <i class="bi bi-pencil-fill text-white me-2"></i>
                                        Changed Password
                                    </span>
                                    <span class="text-muted small">Jan 18, 2025, 14:32</span>
                                </div>
                                <p class="mb-0 text-muted small">
                                    Action performed by: <span class="text-danger">Support</span>
                                </p>
                            </div>
                            <!-- Example History Item -->
                            <div class="list-group-item bg-secondary mb-2 rounded-3">
                                <div class="d-flex justify-content-between">
                                    <span class="fw-bold text-white">Added Backup Code</span>
                                    <span class="text-muted small">Jan 17, 2025, 10:15</span>
                                </div>
                                <p class="mb-0 text-muted small">
                                    Action performed by: <span class="text-info">User</span>
                                </p>
                            </div>
                            <!-- Example History Item -->
                            <div class="list-group-item bg-secondary mb-2 rounded-3">
                                <div class="d-flex justify-content-between">
                                    <span class="fw-bold text-white">Changed Email</span>
                                    <span class="text-muted small">Jan 15, 2025, 08:40</span>
                                </div>
                                <p class="mb-0 text-muted small">
                                    Action performed by: <span class="text-info">Support</span>
                                </p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer border-top border-secondary">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>



<!-- Modal -->
            <div class="modal fade" id="addPasswordModal" tabindex="-1" aria-labelledby="addPasswordModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header justify-content-center">
                            <div class="text-center">
                                <h3 class="modal-title">@((isEditMode ? "Edit Password" : "Add New Password"))</h3>

                            </div>
                            <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@userPassword" OnValidSubmit="CreatePassword" FormName="CreatePassword">
                                <DataAnnotationsValidator />

                                <div class="container">
                                    <div class="row">
                                        <!-- Levý sloupec: Main Information -->
                                        <div class="col-md-6">
                                            <h5 class="text-primary mb-3 text-center">Main Information</h5>
                                            <div class="mb-3">
                                                <label for="username" class="form-label fw-bold">Service Name</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                                                    <InputText type="text" id="username" class="form-control" @bind-Value="userPassword.Name" placeholder="Service Name" />
                                                </div>
                                                <ValidationMessage For="@(() => userPassword.Name)" />
                                            </div>
                                            <div class="mb-3">
                                                <label for="password-email" class="form-label fw-bold">Email</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-envelope-fill"></i></span>
                                                    <InputText type="text" class="form-control" id="email" @bind-Value="userPassword.Email" placeholder="Enter email" />
                                                </div>
                                                <ValidationMessage For="@(() => userPassword.Email)" />
                                            </div>
                                            <div class="mb-3">
                                                <label for="password-category" class="form-label fw-bold">Category</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-folder-fill"></i></span>
                                                    <InputSelect id="category" @bind-Value="userPassword.Category" class="form-select">
                                                        <option disabled selected>Select a category</option>
                                                        @foreach (var category in Categories)
                                                        {
                                                            <option value="@category">@category</option>
                                                        }
                                                    </InputSelect>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Pravý sloupec: Security Settings -->
                                        <div class="col-md-6">
                                            <h5 class="text-primary mb-3 text-center">Security Settings</h5>
                                            <div class="mb-3">
                                                <label for="password" class="form-label fw-bold">Password</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                                                    <InputText type="@passwordType" class="form-control" id="password" placeholder="Enter password" @bind-Value="userPassword.Password" />
                                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                                        <i class="@(isPasswordVisible ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="mb-3 d-flex align-items-center">
                                                <label for="2FA" class="form-label fw-bold me-3">Two-Factor Authentication</label>
                                                <div class="form-check form-switch">
                                                    <InputCheckbox id="twofactor" class="form-check-input" @bind-Value="userPassword.PasswordHas2FA" />
                                                    <label class="form-check-label" for="twofactor">
                                                        @(userPassword.PasswordHas2FA == true ? "Enabled" : "Disabled")
                                                    </label>
                                                </div>
                                            </div>
                                            @if (userPassword.PasswordHas2FA == true)
                                            {
                                                <div class="">
                                                    <label for="BackupCodes" class="form-label fw-bold">Backup Two-Factor Authentication Code <span class="text-muted">(optional)</span></label>
                                                    <InputText id="BackupCodes" class="form-control" @bind-Value="userPassword.BackUpCodes" placeholder="Enter backup code" />
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <!-- Střední sekce: Optional Details -->
                                    <div class="row">
                                        <div class="col-md-8 mx-auto mt-4">
                                            <h5 class="text-primary mb-3 text-center">Optional Details</h5>
                                            <div class="mb-3">
                                                <label for="Notes" class="form-label fw-bold">Notes</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                                                    <InputText class="form-control" id="Notes" @bind-Value="userPassword.Notes" />
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label for="ImagePath" class="form-label fw-bold">Logo</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-image"></i></span>
                                                    <InputFile id="ImagePath" OnChange="HandleImageUpload" accept=".jpg, .jpeg, .png" />
                                                </div>
                                                @if (!string.IsNullOrEmpty(uploadedImagePreview))
                                                {
                                                    <div class="mt-2">
                                                        <img src="@uploadedImagePreview" alt="Preview" class="img-thumbnail" style="max-width: 200px;" />
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Tlačítka -->
                                    <div class="modal-footer d-flex justify-content-center">
                                        <button type="button" class="btn btn-danger me-5" data-bs-dismiss="modal">Close</button>
                                        <button type="submit" class="btn btn-success mt-4" data-bs-dismiss="modal">@((isEditMode ? "Save Changes" : "Add Password"))</button>

                                    </div>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
        </div>

        <!-- Main Area -->
        <div class="row flex-grow-1 m-0 vh-100">
            <!-- Left Column -->
            <div class="col-3 border-end p-3 bg-white d-flex flex-column">
                <h6 class="text-uppercase text-secondary">All Categories</h6>
                    <ul class="list-unstyled flex-grow-1">
                        @foreach (var password in passwords)
                        {
                            <li>
                                <a
                                    class="d-flex align-items-center p-2 text-dark text-decoration-none rounded @(selectedPassword?.Id == password.Id ? "active" : "")"
                                    @onclick="() => SelectPassword(password)"
                                    @onclick:preventDefault>
                                    @if (password.ImagePath != null)
                                    {
                                        <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(password.ImagePath)}")" alt="image" class="me-2 rounded-circle" width="50" >
                                    }
                                    else
                                    {
                                        <img src="images/default-icon.png" alt="Default" class="me-2 rounded-circle" width="30">
                                    }
                                    <div class="text-white">
                                        <strong class="fs-3">@password.Name</strong>
                                        <div class="small text-muted fs-6">@password.Email</div>
                                    </div>
                                </a>
                            </li>
                        }
                    </ul>

                <hr class="text-white">
                <div class="d-flex justify-content-center mt-auto">
                    <button class="btn btn-primary mt-auto w-25" data-bs-toggle="modal" data-bs-target="#addPasswordModal">
                        <i class="bi bi-plus-circle me-2"></i><span class="fw-bold">Add Password</span>
                    </button>
                    <button class="btn btn-danger w-25 ms-5" @onclick="() => DeletePassword(selectedPassword.Id)">
                        <i class="bi bi-trash-fill me-2"></i><span class="fw-bold">Remove</span>
                    </button>
                </div>
            </div>


            <!-- Right Column -->
            <div class="col-9 p-3">
            @if (selectedPassword != null)
            {
                <div class="text-center">
                    @if (selectedPassword?.ImagePath != null)
                    {
                        <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(selectedPassword.ImagePath)}")" 
                            alt="@selectedPassword.Name" 
                            class="rounded-circle mb-3" 
                            width="80" 
                            height="80" />
                    }
                    else
                    {
                        <img src="images/default-icon.png" 
                            alt="Default Icon" 
                            class="rounded-circle mb-3" 
                            width="80" 
                            height="80" />
                    }

                    <h1 class="text-white">@selectedPassword?.Name</h1>
                </div>

                <div class="mt-5">
                    <form>
                            @if(selectedPassword.IsPasswordOld)
                            {
                                <div class="alert alert-danger alert-dismissible fade show mt-5 mx-auto w-25" role="alert">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    <strong>Important:</strong> Some of your passwords are <strong>old</strong> and <strong>not secured</strong>. Please update them as soon as possible.
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            } else {
                                <div class="alert alert-success alert-dismissible fade show mt-4 mx-auto w-25" role="alert">
                                    <i class="bi bi-check-circle me-2"></i>
                                    <strong>Great:</strong> All of your passwords are <strong>secured</strong> and <strong>up-to-date</strong>.
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            }
                            

                            <div class="password-details-card shadow mt-5 mx-auto w-75">
                                <div class="password-details-header bg-primary text-white d-flex align-items-center justify-content-between py-2 px-3">
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-shield-lock-fill me-2 fs-3"></i>
                                            <h5 class="m-0">Password Details</h5>
                                        </div>
                                        <div class="d-flex">
                                        <button type="button" class="btn"
                                                data-bs-toggle="modal"
                                                data-bs-target="#addPasswordModal"
                                                @onclick="OnEditClick">
                                            <i class="bi bi-pencil-fill me-2"></i> Edit
                                        </button>

                                        </div>
                                    </div>
                                <div class="password-details-body bg-dark text-light p-4">
                                    <div class="mb-3">
                                        <p class="mb-1 d-flex align-items-center fs-5">
                                            <strong>Username</strong>
                                        </p>
                                        <p class="fw-bold text-muted fs-5">@selectedPassword.Email</p>
                                    </div>
                                    <div class="mb-3">
                                        <p class="mb-1 d-flex align-items-center fs-5">
                                            <strong>Password</strong>
                                        </p>
                                        <div class="input-group w-25">
                                            <input type="password" class="form-control bg-secondary text-light border-0" 
                                                value="@selectedPassword.Password" readonly />
                                            <button class="btn btn-outline-light" type="button" @onclick="TogglePasswordVisibility">
                                                <i class="@(isPasswordVisible ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <p class="mb-1 d-flex align-items-center fs-5">
                                            <strong>Category</strong>
                                        </p>
                                        <p class="fw-bold text-muted fs-5">@selectedPassword.Category</p>
                                    </div>
                                    <div class="mb-3">
                                        <p class="mb-1 d-flex align-items-center fs-5">
                                            <strong>Two-Factor Authentication</strong>
                                        </p>
                                        <p class="fw-bold text-success fs-5">Enabled</p>
                                    </div>
                                    <div class="mb-3 d-flex align-items-center">
                                        <p class="mb-0 me-3 fs-5">
                                            <strong>One-Time Password</strong>
                                        </p>
                                        <div class="d-flex align-items-center">
                                            <p class="fw-bold mb-0 me-2 fs-5 text-muted">157 548</p>

                                            <!-- Malý kruhový časovač -->
                                            <div class="otp-timer-container">
                                                <svg width="30" height="30" viewBox="0 0 36 36" class="circular-timer">
                                                    <path
                                                        class="circle-bg"
                                                        d="M18 2.0845
                                                        a 15.9155 15.9155 0 0 1 0 31.831
                                                        a 15.9155 15.9155 0 0 1 0 -31.831"
                                                        fill="none"
                                                        stroke="#555"
                                                        stroke-width="2"
                                                    ></path>
                                                    <path
                                                        class="circle"
                                                        d="M18 2.0845
                                                        a 15.9155 15.9155 0 0 1 0 31.831
                                                        a 15.9155 15.9155 0 0 1 0 -31.831"
                                                        fill="none"
                                                        stroke="#ff0000"
                                                        stroke-width="2"
                                                        stroke-dasharray="5, 100"
                                                    ></path>
                                                    <text x="18" y="20.35" class="timer-text" fill="#ff0000" font-size="12px" text-anchor="middle">5</text>
                                                </svg>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <p class="mb-1 d-flex align-items-center fs-5">
                                            <strong>Backup 2FA Codes</strong>
                                        </p>
                                        @if (selectedPassword?.BackUpCodes != null)
                                        {
                                            <div class="input-group w-25">
                                                <!-- Input pro backup codes -->
                                                <input type="@((areBackupCodesVisible) ? "text" : "password")" 
                                                    class="form-control bg-secondary text-light border-0" 
                                                    value="@selectedPassword.BackUpCodes" readonly />
                                                <!-- Tlačítko pro zobrazení/skrytí -->
                                                <button class="btn btn-outline-light" @onclick="ToggleBackupCodesVisibility">
                                                    <i class="@(areBackupCodesVisible ? "bi bi-eye-slash" : "bi bi-eye")"></i>
                                                </button>
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-muted">No backup codes available</p>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        <p class="mb-1 d-flex align-items-center fs-5">
                                            <strong>Notes</strong>
                                        </p>
                                        <p class="fw-bold text-muted fs-5">@selectedPassword.Notes</p>
                                    </div>
                            <hr>
                            <div class="mt-5 mx-auto" style="max-width: 800px;">
                                <div class="d-flex justify-content-between">
                                    <!-- Levá strana -->
                                    <div class="d-flex flex-column align-items-center">
                                        <p class="text-center fw-bold fs-5">Password Details</p>
                                        <p class="mb-2">
                                            <i class="bi bi-calendar-event me-2"></i>
                                            Last change: <strong>Jan 18, 2025 12:01:12</strong>
                                        </p>
                                        <p class="mb-2">
                                            <i class="bi bi-calendar-event me-2"></i>
                                            Added: <strong>Jan 10, 2025 18:19:27</strong>
                                        </p>
                                            <button type="button"
                                                class="btn btn-outline-primary btn-sm mt-2 d-flex align-items-center justify-content-center"
                                                data-bs-toggle="modal"
                                                data-bs-target="#historyModal">
                                            <i class="bi bi-clock-history me-2"></i> View History
                                        </button>
                                    </div>


                                    <!-- Pravá strana -->
                                    <div class="text-end">
                                        <p class="text-center fw-bold fs-5">Password Options</p>
                                        <div class="d-flex flex-column">
                                            <button class="btn btn-outline-success">Reset Password</button>
                                            <button class="btn btn-outline-danger mt-3">Generate Secure Password</button>
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div class="d-flex flex-column align-items-center mt-5">
                                <h6 class="text-white fs-4 mb-5">Password Strength</h6>
                                <div class="position-relative" style="width: 200px; height: 200px;">
                                    <svg width="200" height="200" viewBox="0 0 150 150">
                                        <!-- Podkladový kruh -->
                                        <circle 
                                            cx="75" 
                                            cy="75" 
                                            r="65" 
                                            stroke="#34344A" 
                                            stroke-width="10" 
                                            fill="none" />
                                        <!-- Dynamický kruh -->
                                        <circle 
                                            cx="75" 
                                            cy="75" 
                                            r="65" 
                                            stroke="url(#gradient)" 
                                            stroke-width="10" 
                                            fill="none" 
                                            stroke-dasharray="408" 
                                            stroke-dashoffset="100" 
                                            transform="rotate(-90 75 75)" />

                                        <defs>
                                            <linearGradient id="gradient" x1="0" y1="0" x2="1" y2="1">
                                                <stop offset="0%" stop-color="#FF0000" />
                                                <stop offset="50%" stop-color="#FFFF00" />
                                                <stop offset="100%" stop-color="#00FF00" />
                                            </linearGradient>
                                        </defs>
                                    </svg>
                                    <!-- Hodnota uvnitř kruhu -->
                                    <div class="position-absolute top-50 start-50 translate-middle text-center">
                                        <h3 class="m-0">@selectedPassword.PasswordScore%</h3>
                                        @if (selectedPassword.PasswordScore < 50)
                                        {
                                            <small class="text-danger">Weak</small>
                                        }
                                        else if (selectedPassword.PasswordScore < 75)
                                        {
                                            <small class="text-warning">Moderate</small>
                                        }
                                        else
                                        {
                                            <small class="text-success">Strong</small>
                                        }
                                    </div>
                                    
                                </div>


                            </div>
                        </div>    
                    </div>
                    </form>
                </div>
            }
            else
            {
                <p class="text-muted">Select an account to view details.</p>
            }
        </div>
        </div>
    </div>
</div>

<style>


.bg-warning-subtle {
    background-color: rgba(51, 185, 174, 0.2) !important; /* jemná žlutá */
}
.bg-success-subtle {
    background-color: rgba(25, 135, 84, 0.2) !important; /* jemná zelená */
}
.bg-danger-subtle {
    background-color: rgba(220, 53, 69, 0.2) !important; /* jemná červená */
}


.password-strength-gauge {
    display: flex;
    flex-direction: column;
    align-items: center; /* Zarovnání do středu */
    justify-content: center;
    margin: 20px auto;
}

.gauge {
    position: relative;
    width: 200px;
    height: 100px;
    background: conic-gradient(
        #ff4d4d 0%,      /* Červená */
        #ffc107 50%,     /* Oranžová */
        #28a745 100%     /* Zelená */
    );
    border-radius: 100px 100px 0 0;
    overflow: hidden;
}

.gauge-inner {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 180px;
    height: 90px;
    background-color: #1e1e2f; /* Barva pozadí */
    border-radius: 100px 100px 0 0;
    transform: translate(-50%, -50%);
    z-index: 2;
}

.gauge-needle {
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 4px;
    height: 80px;
    background: #ffffff;
    transform-origin: bottom center;
    z-index: 3;
    transition: transform 0.3s ease-in-out;
}

.gauge-labels {
    position: absolute;
    top: 85px; /* Posunout pod gauge */
    width: 100%;
    display: flex;
    justify-content: space-between;
    padding: 0 10px;
    color: #ffffff;
    font-size: 0.9rem;
    text-align: center;
    z-index: 4;
}

.gauge-label {
    font-weight: bold;
}

.gauge-text {
    margin-top: 20px;
    text-align: center;
}

.gauge-text h1 {
    margin: 0;
    font-size: 2rem;
    color: #ffffff;
}

.gauge-text p {
    margin: 0;
    font-size: 1rem;
    color: #9a9ab0;
}

.password-strength-title {
    margin-bottom: 10px;
    font-size: 1.2rem;
    font-weight: bold;
    color: #ffffff;
    text-align: center;
}


    /* Celkové pozadí */
    body {
        background-color: #1E1E2F;
    }

.password-details-card {
    transition: box-shadow 0.3s ease;
}

.password-list-item:hover {
    background-color: #34344A;
    cursor: pointer;
}




.password-details-header {
    padding: 15px;
    font-size: 1.25rem;
}

.password-details-body {
    background-color: #2B2B3D;
    color: #FFFFFF;
}

.password-details-body p {
    margin-bottom: 10px;
}

.password-details-footer {
    border-top: 1px solid #34344A;
    padding: 15px;
}

.password-details-footer .btn {
    border-radius: 5px;
    font-size: 0.9rem;
}

    /* Barevné ikony */
.nav-link i {
    color: #9A9AB0; /* Výchozí barva ikon */
    transition: color 0.3s; /* Hladký přechod při hoveru */
}

.nav-link:hover i, .nav-link.active i {
    color: #FFFFFF; /* Bílá při aktivaci nebo hoveru */
}

/* Specifické barvy pro jednotlivé ikonky */
.nav-link i.bi-speedometer2 {
    color: #FF6F61; /* Červená pro Dashboard */
}

.nav-link i.bi-lock {
    color: #1E90FF; /* Modrá pro Passwords */
}

.nav-link i.bi-book {
    color: #32CD32; /* Zelená pro Security Tips */
}

.nav-link i.bi-patch-check {
    color: #FFD700; /* Zlatá pro Validator */
}

.nav-link i.bi-folder {
    color: #FF8C00; /* Oranžová pro Social Media */
}

.nav-link i.bi-person-circle {
    color: #f4f4f4; /* Fialová pro Account */
}

.nav-link i.bi-chat-right {
    color: #4682B4; /* Modrá pro Support */
}

.nav-link i.bi-folder2-open {
    color: #A52A2A; /* Hnědá pro Documentation */
}

.nav-link i.bi-trash {
    color: #DC143C; /* Červená pro Recently Deleted */
}

/* Ikonka pro Dark Mode */
 .nav-link i.bi-moon-stars {
    color: #ffff01; /* Modrá barva */
}

/* Ikonka pro Log Out */
.nav-link i.bi-box-arrow-left {
    color: #FF4D4D; /* Červená barva */
}



    .modal-content input,
    .modal-content textarea,
    .modal-content select {
        color: #000000 !important; /* Černý text */
        border: 1px solid #ced4da; /* Světlý rámeček */
        border-radius: 4px; /* Zaoblené hrany */
        padding: 0.5rem;
    }

    /* Placeholder ve vstupech */
    .modal-content input::placeholder,
    .modal-content textarea::placeholder {
        color: #6c757d; /* Tmavě šedý placeholder */
        opacity: 1;
    }

    /* Styl při focusu */
    .modal-content input:focus,
    .modal-content textarea:focus,
    .modal-content select:focus {
        border-color: #80bdff; /* Modrý rámeček při zaměření */
        outline: none;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25); /* Jemný modrý stín */
    }

    /* Styl tlačítek */
    .modal-content .btn-primary {
        background-color: #1A73E8 !important;
        border-color: #1A73E8 !important;

    }



    /* Sidebar */
    .sidebar {
        background-color: #1E1E2F;
        border-right: 1px solid #34344A;
    }

    /* Odkazy v sidebaru */
    .nav-link {
        color: #9A9AB0;
    }

    .nav-link:hover, .nav-link.active {
        background-color: #2B2B3D;
        color: #FFFFFF;
        border-radius: 4px;
    }

    /* Kategorie - hover efekty */
    .list-unstyled a {
        color: #9A9AB0;
    }

    .list-unstyled a:hover, .list-unstyled a.active {
        background-color: #2B2B3D;
        color: #FFFFFF;
        border-radius: 4px;
    }

    /* Pravý sloupec (hlavní obsah) */
    .card, .col-9 {
        background-color: #2B2B3D;
        color: #FFFFFF;
        border: 1px solid #34344A;
        padding: 20px;
        border-radius: 8px;
    }

    /* Tlačítko */
    .btn-primary {
        background-color: #1A73E8;
        border-color: #1A73E8;
        color: #FFFFFF;
    }

    .btn-primary:hover {
        background-color: #0056B3;
        border-color: #0056B3;
        color: #FFFFFF;
    }


    /* Hlavní záhlaví */
    .bg-white {
        background-color: #1E1E2F !important; /* Přepsání bílé na tmavé */

    }

    /* Odkazy v kartě */
    .card a {
        color: #007BFF;
    }

    .card a:hover {
        color: #009EFF;
        text-decoration: underline;
    }

    /* Oddělovací čáry */
    .border-end, .border-bottom {
        border-color: #34344A !important;
    }

    /* Text tlumený */
    .text-muted {
        color: #9A9AB0 !important;
    }

    /* Tmavé pozadí levé části (kategorie) */
    .col-3 {
        background-color: #1E1E2F;
        border-right: 1px solid #34344A;
    }



</style>




@code {
    private PasswordDetails? userPassword { get; set; } = new PasswordDetails();
    private AccountDetails user {get; set; } = new AccountDetails();
    private List<PasswordDetails> passwords { get; set; } = new List<PasswordDetails>();
    public List<string> Categories = new List<string> { "Social Media", "Email", "Banking", "Shopping", "Work", "Other" };
    public List<string> TwoFactorAuth = new List<string> { "Yes", "No" };
    private Dictionary<int, bool> passwordVisibility = new Dictionary<int, bool>(); // Map for searching passwords visibility. KEY-VALUE(Key=id), (Value=bool(is visible/not visible))
    private int passwordLength;
    private string? generatedPassword;
    private bool IsCopied = false;
    private double MaxPasswordDays = 30;
    [Inject]
    public IClipboard? Clipboard { get; set; }
    private bool isPasswordVisible = false; // Stav viditelnosti hesla
    private string passwordType = "password"; // Typ inputu (password/text)
    private PasswordDetails? selectedPassword;
    private int notifications = 3;
    private string? uploadedImagePreview;
    private bool areBackupCodesVisible  = false;
    private bool isEditMode = false;
    private int changes = 0;



    private void OnEditClick()
    {
        isEditMode = true;
        userPassword = selectedPassword; // Případně si můžeš udělat volání API, pokud to chceš načítat detailně
        changes++;
        // Nic víc není třeba, protože samotný modal se otevře přes data-bs-* a nepotřebuje volání JSRuntime
    }



    private void CloseModal()
    {
        isEditMode = false; // Resetujeme režim modalu
        userPassword = new PasswordDetails(); // Resetujeme formulář
        uploadedImagePreview = null; // Vyčistíme obrázek
    }


        private void ToggleBackupCodesVisibility()
        {
            areBackupCodesVisible = !areBackupCodesVisible;
        }

        private async Task HandleImageUpload(InputFileChangeEventArgs e)
        {
            var uploadedFile = e.File;
            if (uploadedFile != null)
            {
                if (uploadedFile.Size > 10 * 1024 * 1024) // 1MB max
                {
                    Console.WriteLine("File is too large.");
                    await Swal.FireAsync("Error", "File size exceeds 1MB.", "error");
                    return;
                }

                var allowedTypes = new[] { "image/jpeg", "image/png", "image/jpg" };
                if (!allowedTypes.Contains(uploadedFile.ContentType))
                {
                    Console.WriteLine("Invalid file type.");
                    await Swal.FireAsync("Error", "Only JPEG and PNG images are allowed.", "error");
                    return;
                }

                var buffer = new byte[uploadedFile.Size];
                await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);

                userPassword.ImagePath = buffer;
                uploadedImagePreview = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            }
        }


    private void SelectPassword(PasswordDetails password)
    {
        selectedPassword = password;
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        passwordType = isPasswordVisible ? "text" : "password";
    }

    private double GetDashOffset(int score)
    {
        double fullCircle = 408; // Celková délka kruhu
        double percentage = score / 100.0; // Převeď skóre na procenta
        return (1 - percentage) * fullCircle; // Vypočítej offset
    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            var isAuthenticated = currentUser.Identity.IsAuthenticated;
            Console.WriteLine($"Is user authenticated: {isAuthenticated}");


            isAuthenticated = currentUser.Identity.IsAuthenticated;

            if (isAuthenticated)
            {
                var userIdClaim = currentUser.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                if (!string.IsNullOrEmpty(userIdClaim))
                {
                    var httpClient = HttpClientFactory.CreateClient("ApiClient");
                    var url = $"api/UserDetails/{userIdClaim}";
                    Console.WriteLine($"Requesting URL: {url}");

                    var result = await httpClient.GetFromJsonAsync<AccountDetails>(url);

                    if (result != null)
                    {
                        user = result;
                        Console.WriteLine("User data loaded successfully.");
                    }
                    else
                    {
                        Console.WriteLine("User not found or API returned null.");
                    }
                }
                else
                {
                    Console.WriteLine("UserId claim is missing.");
                }

            }
            else
            {
                Console.WriteLine("User is not authenticated.");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HttpRequestException: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }

        await LoadPasswords();
        await PasswordOldChecker();
        await PasswordScoreCalculator();
        
    }
    private async Task LoadPasswords()
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        passwords = await httpClient.GetFromJsonAsync<List<PasswordDetails>>($"api/PasswordDetails/{user.Id}");
    }

    private async Task LoadPasswordDetails(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.GetAsync($"api/PasswordDetails/{id}");

        if (response.IsSuccessStatusCode)
        {
            userPassword = await response.Content.ReadFromJsonAsync<PasswordDetails>();
        }
        else
        {
            // Zalogování chyby
            Console.WriteLine($"Failed to load password details. StatusCode: {response.StatusCode}");
        }
    }


    private async Task CreatePassword()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            if (isEditMode)
            {
                // Aktualizace hesla
                var response = await httpClient.PutAsJsonAsync($"api/PasswordDetails/{userPassword.Id}", userPassword);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error updating password: {response.StatusCode}");
                }
            }
            else
            {
                // Přidání nového hesla
                userPassword.AccountDetailsId = user.Id;
                var response = await httpClient.PostAsJsonAsync($"api/PasswordDetails/", userPassword);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error creating password: {response.StatusCode}");
                }
            }

            await LoadPasswords(); // Načteme aktualizovaná hesla
            CloseModal(); // Zavřeme modal
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }




    private async Task DeletePassword(int id)
    {
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.DeleteAsync($"api/PasswordDetails/{id}");

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }

    private async Task EditPassword(int id)
    {
        userPassword.AccountDetailsId = user.Id; // Dodělat - nefunguje EDIT

        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsJsonAsync($"api/PasswordDetails/{id}", new StringContent(JsonSerializer.Serialize(userPassword), Encoding.UTF8, "application/json"));

        if (response.IsSuccessStatusCode)
        {
            await LoadPasswords(); // Reload passwords
        }
        else
        {

        }
    }
    private void TogglePasswordVisibility2(int id)
    {
        if (passwordVisibility.ContainsKey(id)) // if password exists in dictionary, switch his status
        {
            passwordVisibility[id] = !passwordVisibility[id];
        }
        else
        {
            passwordVisibility[id] = true; // if password is not in dictionary, add him with default visibility status
        }
    }
     private bool IsPasswordVisible(int userId)
    {
        return passwordVisibility.ContainsKey(userId) && passwordVisibility[userId];
    }

    private string DisplayPassword(int id, string password)
    {
        return passwordVisibility.ContainsKey(id) && passwordVisibility[id] ? password : HidePassword(password); // returns password in open-format, if is visible, or hidden, or not anything
    }

    private string HidePassword(string password)
    {
        return new string('*', password.Length); // Hides Password in *
    }

    private void GeneratePassword()
    {
        generatedPassword = PasswordGenerator(passwordLength);    
    }

    private string PasswordGenerator(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; // Valid characters for password

        var random = new Random();
        return new string(Enumerable.Repeat(chars, length)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task CopyTextToClipboard()
    {
        // Copy text to clipboard
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", generatedPassword);
        IsCopied = true;
        await Task.Delay(4000);
        IsCopied = false;
    }


    private async Task PasswordOldChecker()
    {
        foreach (var password in passwords)
        {
            if (password.CreatedAt.AddDays(MaxPasswordDays) <= DateTime.Now)
            {
                password.IsPasswordOld = true;
            }
        }
        
        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PutAsJsonAsync("api/PasswordDetails/UpdateOldPasswords", passwords); 

        if(response.IsSuccessStatusCode)
        {
            await LoadPasswords();
        }
        
    }

    private async Task PasswordScoreCalculator()
    {
        foreach (var password in passwords)
    {
            var passwordId = password.Id; 
            
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.PutAsJsonAsync($"api/PasswordDetails/{passwordId}/calculate-score", password);
        
            if (response.IsSuccessStatusCode)
            {
                await LoadPasswords();
            }
        }
    }
}


