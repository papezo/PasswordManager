@page "/Reset-password"


@rendermode InteractiveServer

@using System.Security.Claims
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.Data
@using WebApp.Models
@using System.Net.Http
@using System.Net.Http.Json

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext appDbContext
@inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Password Reset</PageTitle>
<body>
    <div class="d-flex vh-100">
        <div class="d-flex justify-content-center align-items-center vh-100 text-white" style="width: 100%;">
            <div class="col-md-6 col-lg-4 text-center">
                <div class="card bg-light text-dark shadow-lg rounded-4 p-4">
                    <h1 class="card-title text-center mb-4">Password Reset</h1>
                    <p></p>
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-info mt-3">
                            @message
                        </div>
                    }
                    <EditForm Model="resetPassword" OnValidSubmit="HandleResetPassword" FormName="ResetPasswordForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                         <div class="mb-3">
                            <label for="password" class="form-label mb-2">Password</label>
                            <div class="d-flex justify-content-center">
                                <div class="input-group" style="width: 100%; max-width: 400px;">
                                    <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                    <InputText id="password" @bind-Value="resetPassword.Password" class="form-control" placeholder="Password" type="password" />
                                </div>
                            </div>
                        </div> 
                        
                         <div class="mb-3">
                            <label for="confirm_password" class="form-label mb-2">Confirm Password</label>
                            <div class="d-flex justify-content-center">
                                <div class="input-group" style="width: 100%; max-width: 400px;">
                                    <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                    <InputText id="confirm_password" @bind-Value="resetPassword.ConfirmPassword" class="form-control" placeholder="Confirm Password" type="password" />
                                </div>
                            </div>
                        </div> 

                        <div class="text-center mb-4 mt-5">
                            <button type="submit" class="btn btn-primary w-25">Change Password</button>
                        </div> 

                    </EditForm> 
                </div>
            </div>
        </div>
    </div>
</body>

<style>
    body {
        background: #bdc3c7;  /* fallback for old browsers */
        background: -webkit-linear-gradient(to right, #2c3e50, #747779);  /* Chrome 10-25, Safari 5.1-6 */
        background: linear-gradient(to right, #2c3e50, #bdc3c7); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    }
</style>

@code {
    [SupplyParameterFromForm]
    private ResetPassword resetPassword { get; set; } = new ResetPassword();
    private AccountDetails user { get; set; } = new AccountDetails();
    private string message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        if (query.TryGetValue("email", out var email))
        {
            user.Email = email;
            await LoadUserByEmail(user.Email);
        }
        else
        {
            message = "Invalid password reset link.";
        }
    }


    private async Task LoadUserByEmail(string email)
    {
        var client = HttpClientFactory.CreateClient("ApiClient");
        user = await client.GetFromJsonAsync<AccountDetails>($"api/AccountDetails/email/{email}");

        if (user == null)
        {
            message = "User not found.";
        }
    }

    private async Task HandleResetPassword()
    {

        var client = HttpClientFactory.CreateClient("ApiClient");

        if (!string.IsNullOrEmpty(resetPassword.Password) && !string.IsNullOrEmpty(resetPassword.ConfirmPassword))
        {
            if (resetPassword.Password != resetPassword.ConfirmPassword)    
            {
                message = "Passwords do not match.";
                return;
            }
        }

        var response = await client.PutAsJsonAsync($"api/AccountDetails/Reset-password/{user.Id}", resetPassword);

        if (response.IsSuccessStatusCode)
        {
            message = "Password reset successful. You can now login with your new password.";
            await Task.Delay(5000);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Error: " + errorContent);
        }
    }
}