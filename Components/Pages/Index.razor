@page "/Login"


@using System.Security.Claims
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using WebApp.Data
@using WebApp.Models
@using System.Net.Http
@using System.Net.Http.Json

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ApplicationDbContext appDbContext
@inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login Page</PageTitle>

<div class="login-container">
    <div class="login-box animate__animated animate__fadeInUp">
        <div class="glassmorphism">
            <div class="text-center mb-5">
                <img src="images/plart4.png" alt="Logo" class="login-icon" />
                <h1 class="neon-text mb-3">Log In To Your Account</h1>
                <span class="text-muted fw-bold ms-5">Don't have Account yet?</span><a href="/CreateAccount" class="neon-link fw-bold"> Create Account</a>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert alert-@messageType alert-dismissible fade show custom-alert" role="alert">
                    @message
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <EditForm Model="@user" OnValidSubmit="Authenticate" class="needs-validation" FormName="loginForm">
                <DataAnnotationsValidator />
                <div class="d-flex flex-column align-items-center">
                <div class="form-group mb-4 w-50">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                        <InputText @bind-Value="user.Username" class="form-control modern-input fs-5" id="username" placeholder="Username" />
                    </div>
                    <ValidationMessage For="@(() => user.Username)" class="text-danger" />
                </div>

                <div class="form-group mb-4 w-50">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <InputText type="password" @bind-Value="user.Password" class="form-control modern-input fs-5" id="password" placeholder="Password" />
                    </div>
                    <ValidationMessage For="@(() => user.Password)" class="text-danger" />
                </div>

                <div class="form-check mb-4">
                    <InputCheckbox @bind-Value="user.rememberMe" class="form-check-input custom-checkbox" id="rememberMe" />
                    <label class="form-check-label fw-bold" for="rememberMe">Remember me</label>
                </div>
                </div>

                <div class="d-flex justify-content-center mt-4">
                <button type="submit" class="btn btn-glow w-25 mb-4">
                    Sign In <i class="fas fa-arrow-right ms-2"></i>
                </button>
                </div>

                <div class="text-center links">
                    <a href="/ForgotPassword" class="neon-link fw-bold">Forgot Password?</a>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="footer text-center">
        <span class="text-muted">© 2025 Plart. All rights reserved.</span>
    </div>
</div>


<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: #0F172A;
    }

    .login-box {
        width: 100%;
        max-width: 50vh;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        flex: 1; /* Allow the login box to grow and fill the available space */
    }

    .glassmorphism {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }

    .login-icon {
        width: 20vh;
        color: #2962ff;
        filter: drop-shadow(0 0 5px #2962ff);
    }

    .neon-text {
        color: #fff;
        text-shadow: 0 0 10px #2962ff;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .modern-input {
        background: rgba(255, 255, 255, 0.05) !important;
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff !important;
        padding: 0.8rem;
    }

    .modern-input:focus {
        box-shadow: 0 0 0 2px rgba(41, 98, 255, 0.3);
        border-color: #2962ff;
    }

    .input-group-text {
        background: rgba(41, 98, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #2962ff;
    }

    .btn-glow {
        background: linear-gradient(45deg, #2962ff, #5c84ff);
        border: none;
        color: white;
        padding: 12px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-glow:hover {
        transform: translateY(-2px);
        box-shadow: 0 0 20px rgba(41, 98, 255, 0.4);
    }

    .neon-link {
        color: #2962ff;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .neon-link:hover {
        color: #5c84ff;
        text-shadow: 0 0 8px rgba(41, 98, 255, 0.6);
    }

    .custom-alert {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff;
    }

    .form-check-label {
        color: #fff;
    }

    .text-muted {
        color: #8b9cb3 !important;
    }

    .custom-checkbox {
        background-color: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.1);
    }

    .custom-checkbox:checked {
        background-color: #2962ff;
        border-color: #2962ff;
    }

    .form-control::placeholder {
        color: rgba(255, 255, 255, 0.5);
    }

    .footer {
        width: 100%;
        padding: 1rem;
        background: #0F172A;
        color: #8b9cb3;
        text-align: center;
    }
</style>


@code {

    [CascadingParameter]
    public HttpContext? HttpContext{get; set;}

    [SupplyParameterFromForm]
    private LoginDetails user { get; set; } = new LoginDetails();
    private string message { get; set; } = string.Empty;
    private string messageType { get; set; } = "success"; // Default to success
    private AccountDetails accountDetails {get; set;} = new AccountDetails();

    private async Task Authenticate()
    {
        var userAccount = appDbContext.AccountDetails
                        .Where(x => x.Username == user.Username)
                        .FirstOrDefault();

        if(userAccount is null || !SecretHasher.Verify(user.Password, userAccount.Password))
        {
            message = "Wrong username or password.";
            messageType = "danger";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, userAccount.Id.ToString()), 
            new Claim(ClaimTypes.Name, userAccount.Username),
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
        NavigationManager.NavigateTo("/HomeManager");
    }

    private async Task SetRememberMe()
    {
        if(user.rememberMe == true)
        {
            
        }
    }
}