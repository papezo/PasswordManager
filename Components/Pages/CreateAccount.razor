@page "/CreateAccount"
@rendermode InteractiveServer

@using System.Net.Http
@using System.Net.Http.Json
@using WebApp.Models

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Account</PageTitle>
<body>
    <div class="d-flex vh-100">
        <div class="d-flex justify-content-center align-items-center vh-100 text-white" style="width: 100%;">
            <div class="col-md-6 col-lg-4">
                <div class="card bg-light text-dark shadow-lg rounded-4 p-4">
                    <h1 class="card-title text-center mb-4">Create an Account</h1>
                    <p class="text-center">Already have an account? <a href="/" class="link-primary text-decoration-none">Sign In</a></p>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }

                    <EditForm Model="@user" OnValidSubmit="RegisterAccount">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="fullName" class="form-label mb-2">Full Name</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person"></i></span>
                                <InputText id="fullName" @bind-Value="user.FullName" class="form-control" placeholder="Full Name" required />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="username" class="form-label mb-2">Username</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person-fill"></i></span>
                                <InputText id="username" @bind-Value="user.Username" class="form-control" placeholder="Username" required />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label mb-2">Email</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                <InputText id="email" @bind-Value="user.Email" class="form-control" placeholder="Email" type="email" required />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label mb-2">Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                <InputText id="password" @bind-Value="user.Password" class="form-control" placeholder="Password" type="password" required />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label mb-2">Confirm Password</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-lock"></i></span>
                                <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" placeholder="Confirm Password" type="password" required />
                            </div>
                        </div>

                        <div class="d-flex justify-content-center align-items-center">
                            <button type="submit" class="btn btn-primary w-25 mt-3">Create Account</button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <div class="text-center my-4">
                            <div class="divider-text">Or sign in with</div>
                        </div>
                        <div class="d-flex align-items-center justify-content-center text-center">
                            <button type="button" class="btn btn-outline-dark me-2 w-50 p-1">
                                <img src="/images/google2.png" alt="Google Logo" width="40" height="40" class="me-2">
                                Sign up with Google
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

<style>
    .divider-text {
        position: relative;
        text-align: center;
        color: #6c757d;
    }
    .divider-text::before, .divider-text::after {
        content: "";
        position: absolute;
        top: 50%;
        width: 40%;
        border-bottom: 1px solid #6c757d;
        transform: translateY(-50%);
    }
    .divider-text::before {
        left: 0;
    }
    .divider-text::after {
        right: 0;
    }
</style>

@code {
    private AccountDetails user { get; set; } = new AccountDetails();

    private string successMessage { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;

    private async Task RegisterAccount()
    {
        Console.WriteLine("RegisterAccount called");

        if (user.Password != user.ConfirmPassword)
        {
            errorMessage = "Error: Passwords do not match";
            return;
        }

        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PostAsJsonAsync("api/AccountDetails", user);

        Console.WriteLine($"Response status code: {response.StatusCode}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Account created successfully");
            successMessage = "Account created successfully. Redirecting...";
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine($"Error: {response.ReasonPhrase}");
            successMessage = string.Empty;
            errorMessage = $"Error: {response.ReasonPhrase}";
        }
    }
}
