@page "/CreateAccount"
@rendermode InteractiveServer

@using System.Net.Http
@using System.Net.Http.Json
@using WebApp.Models

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager

<PageTitle>Create Account</PageTitle>
<div class="min-vh-100 d-flex align-items-center justify-content-center login-container">
    <div class="container py-5">
        <div class="row justify-content-center">
            <div class="col-md-8 col-xl-12">
                <div class="card shadow-2xl border-0 rounded-4 overflow-hidden glassmorphism">
                    <div class="text-center">
                        <img src="/images/plart4.png" alt="Logo"  class="login-icon">
                    </div>
                    <div class="card-body p-5">
                        <h1 class="text-center mb-4 fw-bold  neon-text">Create an Account</h1>
                        <p class="text-center text-muted mb-4">Already have an account? <a href="/Login" class="text-primary fw-bold text-decoration-none neon-link">Sign In</a></p>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show custom-alert" role="alert">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>@errorMessage
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success alert-dismissible fade show custom-alert" role="alert">
                                <i class="bi bi-check-circle-fill me-2"></i>@successMessage
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        }

                        <EditForm Model="@user" OnValidSubmit="RegisterAccount" FormName="createAccountForm" class="needs-validation">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-4" />
         
                            <div class="d-flex justify-content-center mb-3">
                                <div class="form-floating w-50">
                                    <InputText id="fullName" @bind-Value="user.FullName" class="form-control modern-input" placeholder="Full Name" required />
                                    <label for="fullName"><i class="bi bi-person me-2"></i>Full Name</label>
                                    <div class="form-text">Enter your full legal name</div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center mb-3">
                                <div class="form-floating w-50">
                                    <InputText id="username" @bind-Value="user.Username" class="form-control modern-input" placeholder="Username" required />
                                    <label for="username"><i class="bi bi-person-fill me-2"></i>Username</label>
                                    <div class="form-text">Choose a unique username</div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center mb-3">
                                <div class="form-floating w-50">
                                    <InputText id="email" @bind-Value="user.Email" class="form-control modern-input" type="email" placeholder="Email" required />
                                    <label for="email"><i class="bi bi-envelope me-2"></i>Email</label>
                                    <div class="form-text">We'll never share your email</div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center mb-3">
                                <div class="form-floating w-50">
                                    <InputText id="password" @bind-Value="user.Password" class="form-control modern-input" type="password" placeholder="Password" required />
                                    <label for="password"><i class="bi bi-lock me-2"></i>Password</label>
                                    <div class="form-text">Use 8+ characters with mix of letters, numbers & symbols</div>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center mb-4">
                                <div class="form-floating w-50">
                                    <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control modern-input" type="password" placeholder="Confirm Password" required />
                                    <label for="confirmPassword"><i class="bi bi-lock-fill me-2"></i>Confirm Password</label>
                                </div>
                            </div>

                            <div class="d-flex justify-content-center mb-4">
                                <div class="form-check">
                                    <input class="form-check-input custom-checkbox" type="checkbox" id="terms" required>
                                    <label class="form-check-label" for="terms">
                                        I agree to the <a href="#" class="text-primary neon-link">Terms of Service</a> and <a href="#" class="text-primary neon-link">Privacy Policy</a>
                                    </label>
                                </div>
                            </div>
                            
                   

                            <div class="d-flex align-items-center justify-content-center">
                                <button type="submit" class="btn btn-glow w-25 py-3 mb-4 rounded-3">
                                    <i class="bi bi-person-plus me-2"></i>Create Account
                                </button>
                            </div>
                        </EditForm>

                        <div class="position-relative mb-3">
                            <span class="position-absolute top-50 start-50 translate-middle text-muted">or continue with</span>
                        </div>

                        <div class="d-flex gap-5 mb-3">
                            <button class="btn btn-glow flex-grow-1 py-3 rounded-3 d-flex align-items-center justify-content-center w-25" type="button">
                                <img src="/images/google2.png" alt="Google Logo" width="24" height="24" class="me-2">
                                Google
                            </button>
                            <button class="btn btn-glow flex-grow-1 py-3 rounded-3 d-flex align-items-center justify-content-center w-25" type="button">
                                <i class="bi bi-github me-2 fs-5"></i>GitHub
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #0F172A;
    }

    .login-box {
        width: 100%;
        max-width: 50vh;
        padding: 1rem;
    }

    .glassmorphism {
        background: rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
    }

    .login-icon {
        width: 20vh;
        color: #2962ff;
        filter: drop-shadow(0 0 5px #2962ff);
    }

    .neon-text {
        color: #fff;
        text-shadow: 0 0 10px #2962ff;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .modern-input {
        background: rgba(255, 255, 255, 0.05) !important;
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff !important;
        padding: 0.8rem;
    }

    .modern-input:focus {
        box-shadow: 0 0 0 2px rgba(41, 98, 255, 0.3);
        border-color: #2962ff;
    }

    .modern-input::placeholder {
        color: rgba(255, 255, 255, 0.5); /* Light color for placeholder text */
    }

    .input-group-text {
        background: rgba(41, 98, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #2962ff;
    }

    .btn-glow {
        background: linear-gradient(45deg, #2962ff, #5c84ff);
        border: none;
        color: white;
        padding: 12px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-glow:hover {
        transform: translateY(-2px);
        box-shadow: 0 0 20px rgba(41, 98, 255, 0.4);
    }

    .neon-link {
        color: #2962ff;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .neon-link:hover {
        color: #5c84ff;
        text-shadow: 0 0 8px rgba(41, 98, 255, 0.6);
    }

    .custom-alert {
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: #fff;
    }

    .form-check-label {
        color: #fff;
    }

    .text-muted {
        color: #8b9cb3 !important;
    }

    .custom-checkbox {
        background-color: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.1);
    }

    .custom-checkbox:checked {
        background-color: #2962ff;
        border-color: #2962ff;
    }

    .form-control::placeholder {
        color: rgba(255, 255, 255, 0.5); /* Light color for placeholder text */
    }

    .form-label {
        color: white;
        margin-bottom: 0.5rem;
    }
</style>
@code {
    private AccountDetails user { get; set; } = new AccountDetails();

    private string successMessage { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;

    private async Task RegisterAccount()
    {
        Console.WriteLine("RegisterAccount called");

        if (user.Password != user.ConfirmPassword)
        {
            errorMessage = "Error: Passwords do not match";
            return;
        }

        user.Password = SecretHasher.Hash(user.Password);

        var httpClient = HttpClientFactory.CreateClient("ApiClient");
        var response = await httpClient.PostAsJsonAsync("api/AccountDetails", user);

        Console.WriteLine($"Response status code: {response.StatusCode}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Account created successfully");
            successMessage = "Account created successfully. Redirecting...";
            await Task.Delay(3000);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Console.WriteLine($"Error: {response.ReasonPhrase}");
            successMessage = string.Empty;
            errorMessage = $"Error: {response.ReasonPhrase}";
        }
    }
}